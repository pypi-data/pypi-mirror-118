{
	"info": {
		"_postman_id": "24abc82b-4f22-4c07-a61c-82696490d7c0",
		"name": "Jobs api collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Requests",
			"item": [
				{
					"name": "Create a Job",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json(); ",
									"var requestUrl = pm.request.url.getPath();",
									"",
									"pm.test(\"response is Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// example using response assertions",
									"pm.test(\"check if error is present\", function () { ",
									"    pm.response.to.not.have.jsonBody(\"errors\");",
									"});",
									"",
									"var jobIdPattern = /^[0-9a-zA-Z]+$/ ;",
									"pm.test(\"check if the job_id type is correct\", function() {",
									"    pm.expect(jsonData.data.job_id).match(jobIdPattern);",
									"});",
									"",
									"var projectIDPattern = /^[0-9]+$/;",
									"pm.test(\"check if the project_id type is correct\", function() {",
									"    pm.expect(jsonData.data.project_id).match(projectIDPattern);",
									"});",
									"",
									"",
									"pm.test(\"check if the project id's are correct\", function() {",
									"    pm.expect(jsonData.data.project_id).is.to.equal(parseInt(postman.getGlobalVariable(\"project_id\")));",
									"});",
									"",
									"var respSchema = {",
									" \"data\": {",
									" \"project_id\": \"number\",",
									" \"job_id\": \"string\"",
									" }",
									"};",
									"",
									"pm.test('Response Schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, respSchema)).to.be.true;",
									"  // resp is valid, set the job_id to be used by further apis",
									"  postman.setGlobalVariable(\"job_id\", jsonData.data.job_id);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.be.header(\"Content-Type\", \"application/vnd.api+json\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"jobs\",\n    \"attributes\": {\n    \t\"name\": \"job-1\",\n    \t\"image\": \"docker/whalesay\",\n\t\t\"tag\": \"latest\",\t\t\n\t\t\"cpu\": \"1\",\n\t\t\"memory\": \"1Gi\",\n\t\t\"command\": [\"bash\",\"-c\", \"while true; do echo 'hello' ; sleep 2; done\"],\n\t\t\"env\": {\n\t\t\t\"port\": \"3000\",\n\t\t\t\"host\": \"localhost\"\n\t\t},\n\t\t\"secret_env\" : {}\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/projects/{{project_id}}/jobs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"projects",
								"{{project_id}}",
								"jobs"
							]
						},
						"description": "This api creates a Job under the user project"
					},
					"response": []
				},
				{
					"name": "View a Job",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"postman.setGlobalVariable('content_type_header', 'application/vnd.api+json')"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json(); ",
									"var requestUrl = pm.request.url.getPath();",
									"",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check the status of Job\", function() {",
									"    pm.expect(jsonData.data[0].attributes.state).to.be.oneOf([\"SUCCESS\", \"ERROR\", \"PENDING\", \"RUNNING\", \"SYSTEM_ERROR\", \"IMAGE_PULL_ERROR\", \"RESOURCE_ALLOC_ERROR\", \"TIME_LIMIT_EXCEEDED_ERROR\"]);",
									"});",
									"",
									"pm.test(\"Check the type of response\", function() {",
									"    pm.expect(jsonData.data[0].type).to.eql(\"jobs\");",
									"});",
									"",
									"var respSuccessSchema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": {\"type\": \"string\"},",
									"        \"attributes\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"created_ts\": {\"type\": \"number\"},",
									"                \"ended_ts\":{\"type\":\"number\"},",
									"                \"job_name\" :{\"type\":\"string\"},",
									"                \"log_ids\": {\"type\": \"array\"},",
									"                \"started_ts\": {\"type\":\"number\"},",
									"                \"state\": {\"type\": \"string\"},",
									"                \"creator_id\": {\"type\": \"number\"},",
									"                \"config_json\" : {",
									"                    \"type\" : \"object\"",
									"                },",
									"                \"project_id\": {\"type\":\"number\"},",
									"                \"job_id\": {\"type\":\"string\"},",
									"            }",
									"        }        ",
									"    },",
									"    \"required\": [\"attributes\"]",
									"};",
									"pm.test(\"Check if the response is in correct format\", function() {",
									"    pm.expect(tv4.validate(jsonData.data[0], respSuccessSchema)).to.be.true;",
									"});",
									"",
									"// example using response assertions",
									"pm.test(\"check if error is present\", function () { ",
									"    pm.response.to.not.have.jsonBody(\"errors\"); ",
									"});",
									"",
									"var jobIdPattern = /^[0-9a-zA-Z]+$/ ;",
									"pm.test(\"check if the job_id type is correct\", function() {",
									"    pm.expect(jsonData.data[0].id).match(jobIdPattern);",
									"    pm.expect(jsonData.data[0].attributes.job_id).match(jobIdPattern);",
									"});",
									"",
									"var projectIDPattern = /^[0-9]+$/;",
									"pm.test(\"check if the project_id type is correct\", function() {",
									"    pm.expect(jsonData.data[0].attributes.project_id).match(projectIDPattern);",
									"});",
									"",
									"",
									"pm.test(\"check if job_id/id attribute is present\", function() {",
									"    pm.expect(jsonData.data[0].id).is.to.equal(postman.getGlobalVariable(\"job_id\"));",
									"    pm.expect(jsonData.data[0].attributes.job_id).is.to.equal(postman.getGlobalVariable(\"job_id\"));",
									"});",
									"",
									"pm.test(\"check if project id attribute is present\", function() {",
									"    pm.expect(jsonData.data[0].attributes.project_id).is.to.equal(parseInt(postman.getGlobalVariable(\"project_id\")));",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.be.header(\"Content-Type\", \"application/vnd.api+json\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "{{content_type_header}}",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/projects/{{project_id}}/jobs/{{job_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"projects",
								"{{project_id}}",
								"jobs",
								"{{job_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "View all jobs in the project",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"postman.setGlobalVariable('content_type_header', 'application/vnd.api+json')"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json(); ",
									"var requestUrl = pm.request.url.getPath();",
									"",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Check the type of response\", function() {",
									"    pm.expect(jsonData.data[0].type).to.eql(\"jobs\");",
									"});",
									"",
									"// example using response assertions",
									"pm.test(\"check if error is present\", function () { ",
									"    pm.response.to.not.have.jsonBody(\"errors\"); ",
									"});",
									"",
									"var jobIdPattern = /^[0-9a-zA-Z]+$/ ;",
									"pm.test(\"check if the job_id type is correct\", function() {",
									"    pm.expect(jsonData.data[0].id).match(jobIdPattern);",
									"    pm.expect(jsonData.data[0].attributes.job_id).match(jobIdPattern);",
									"});",
									"",
									"var projectIDPattern = /^[0-9]+$/;",
									"pm.test(\"check if the project_id type is correct\", function() {",
									"    pm.expect(jsonData.data[0].attributes.project_id).match(projectIDPattern);",
									"});",
									"",
									"",
									"",
									"pm.test(\"check if project id attribute is present\", function() {",
									"    pm.expect(jsonData.data[0].attributes.project_id).is.to.equal(parseInt(postman.getGlobalVariable(\"project_id\")));",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.be.header(\"Content-Type\", \"application/vnd.api+json\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "{{content_type_header}}"
							},
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/projects/{{project_id}}/jobs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"projects",
								"{{project_id}}",
								"jobs"
							]
						}
					},
					"response": []
				},
				{
					"name": "View all jobs in the project(20 results at a time)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"postman.setGlobalVariable('content_type_header', 'application/vnd.api+json')"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json(); ",
									"var requestUrl = pm.request.url.getPath();",
									"",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check the results returned shouldn't be more than 20\", function(){",
									"   pm.expect(jsonData.data.length <= 20).to.be.true;",
									"});",
									"",
									"pm.test(\"Check the type of response\", function() {",
									"    pm.expect(jsonData.data[0].type).to.eql(\"jobs\");",
									"});",
									"",
									"// example using response assertions",
									"pm.test(\"check if error is present\", function () { ",
									"    pm.response.to.not.have.jsonBody(\"errors\"); ",
									"});",
									"",
									"var jobIdPattern = /^[0-9a-zA-Z]+$/ ;",
									"pm.test(\"check if the job_id type is correct\", function() {",
									"    pm.expect(jsonData.data[0].id).match(jobIdPattern);",
									"    pm.expect(jsonData.data[0].attributes.job_id).match(jobIdPattern);",
									"});",
									"",
									"var projectIDPattern = /^[0-9]+$/;",
									"pm.test(\"check if the project_id type is correct\", function() {",
									"    pm.expect(jsonData.data[0].attributes.project_id).match(projectIDPattern);",
									"});",
									"",
									"",
									"",
									"pm.test(\"check if project id attribute is present\", function() {",
									"    pm.expect(jsonData.data[0].attributes.project_id).is.to.equal(parseInt(postman.getGlobalVariable(\"project_id\")));",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.be.header(\"Content-Type\", \"application/vnd.api+json\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "{{content_type_header}}"
							},
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/projects/{{project_id}}/jobs?page[size]={{page_size}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"projects",
								"{{project_id}}",
								"jobs"
							],
							"query": [
								{
									"key": "page[size]",
									"value": "{{page_size}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Cancel a Job",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"postman.setGlobalVariable('content_type_header', 'application/vnd.api+json')"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var requestUrl = pm.request.url.getPath();",
									"",
									"pm.test(\"response is OK, No Content\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "{{content_type_header}}",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/projects/{{project_id}}/jobs/{{job_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"projects",
								"{{project_id}}",
								"jobs",
								"{{job_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Viewing a Job after cancelling",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"postman.setGlobalVariable('content_type_header', 'application/vnd.api+json')"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json(); ",
									"var requestUrl = pm.request.url.getPath();",
									"",
									"",
									"console.log('byeeee')",
									"pm.test(\"response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check the status of Job\", function() {",
									"    pm.expect(jsonData.data[0].attributes.state).to.eql(\"CANCELLED\");",
									"});",
									"",
									"pm.test(\"Check the type of response\", function() {",
									"    pm.expect(jsonData.data[0].type).to.eql(\"jobs\");",
									"});",
									"",
									"var respSuccessSchema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": {\"type\": \"string\"},",
									"        \"attributes\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"created_ts\": {\"type\": \"number\"},",
									"                \"ended_ts\":{\"type\":\"number\"},",
									"                \"job_name\" :{\"type\":\"string\"},",
									"                \"log_ids\": {\"type\": \"array\"},",
									"                \"started_ts\": {\"type\":\"number\"},",
									"                \"state\": {\"type\": \"string\"},",
									"                \"creator_id\": {\"type\": \"number\"},",
									"                \"config_json\" : {",
									"                    \"type\" : \"object\"",
									"                },",
									"                \"project_id\": {\"type\":\"number\"},",
									"                \"job_id\": {\"type\":\"string\"},",
									"            }",
									"        }        ",
									"    },",
									"    \"required\": [\"attributes\"]",
									"};",
									"pm.test(\"Check if the response is in correct format\", function() {",
									"    pm.expect(tv4.validate(jsonData.data[0], respSuccessSchema)).to.be.true;",
									"});",
									"",
									"// example using response assertions",
									"pm.test(\"check if error is present\", function () { ",
									"    pm.response.to.not.have.jsonBody(\"errors\"); ",
									"});",
									"",
									"var jobIdPattern = /^[0-9a-zA-Z]+$/ ;",
									"pm.test(\"check if the job_id type is correct\", function() {",
									"    pm.expect(jsonData.data[0].id).match(jobIdPattern);",
									"    pm.expect(jsonData.data[0].attributes.job_id).match(jobIdPattern);",
									"});",
									"",
									"var projectIDPattern = /^[0-9]+$/;",
									"pm.test(\"check if the project_id type is correct\", function() {",
									"    pm.expect(jsonData.data[0].attributes.project_id).match(projectIDPattern);",
									"});",
									"",
									"",
									"pm.test(\"check if job_id/id attribute is present\", function() {",
									"    pm.expect(jsonData.data[0].id).is.to.equal(postman.getGlobalVariable(\"job_id\"));",
									"    pm.expect(jsonData.data[0].attributes.job_id).is.to.equal(postman.getGlobalVariable(\"job_id\"));",
									"});",
									"",
									"pm.test(\"check if project id attribute is present\", function() {",
									"    pm.expect(jsonData.data[0].attributes.project_id).is.to.equal(parseInt(postman.getGlobalVariable(\"project_id\")));",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.be.header(\"Content-Type\", \"application/vnd.api+json\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "{{content_type_header}}"
							},
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/projects/{{project_id}}/jobs/{{job_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"projects",
								"{{project_id}}",
								"jobs",
								"{{job_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Job with Bad Request header",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"postman.setGlobalVariable(\"content_type_header\", \"application/json\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json(); ",
									"var requestUrl = pm.request.url.getPath();",
									"",
									"pm.test(\"response is Unsupported Media Type\", function () {",
									"    pm.response.to.have.status(415);",
									"});",
									"",
									"// example using response assertions",
									"pm.test(\"check if error is present\", function () { ",
									"    pm.response.to.have.jsonBody(\"errors\");",
									"});",
									"",
									"var respSchema = {",
									" \"errors\": [{",
									"    \"status\": \"string\",",
									"    \"code\": \"string\",",
									"    \"title\": \"string\",",
									"    \"detail\": \"string\"",
									" }]",
									"};",
									"",
									"pm.test('Response Schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, respSchema)).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "{{content_type_header}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"jobs\",\n    \"attributes\": {\n    \t\"name\": \"job-1\",\n    \t\"image\": \"docker/whalesay\",\n\t\t\"tag\": \"latest\",\t\t\n\t\t\"cpu\": \"1\",\n\t\t\"machineType\": \"ci2xlarge\",\n\t\t\"memory\": \"1Gi\",\n\t\t\"command\": [\"cowsay\", \"whalesay\"],\n\t\t\"env\": {\n\t\t\t\"port\": \"3000\",\n\t\t\t\"host\": \"localhost\"\n\t\t},\n\t\t\"secret_env\" : {}\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/projects/{{project_id}}/jobs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"projects",
								"{{project_id}}",
								"jobs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Job with No Body given",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json(); ",
									"var requestUrl = pm.request.url.getPath();",
									"",
									"pm.test(\"response is Unprocessable Entity\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"// example using response assertions",
									"pm.test(\"check if error is present\", function () { ",
									"    pm.response.to.have.jsonBody(\"errors\");",
									"});",
									"",
									"var respSchema = {",
									" \"errors\": [{",
									"    \"status\": \"string\",",
									"    \"code\": \"string\",",
									"    \"title\": \"string\",",
									"    \"detail\": \"string\"",
									" }]",
									"};",
									"",
									"pm.test('Response Schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, respSchema)).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/vnd.api+json"
							}
						],
						"url": {
							"raw": "{{base_url}}/projects/{{project_id}}/jobs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"projects",
								"{{project_id}}",
								"jobs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Job with wrong request Body format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json(); ",
									"",
									"pm.test(\"response is Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"jobs\",\n    \"attributes\": {\n    \t\"name\": \"job-1\",\n    \t\"image\": \"docker/whalesay\",\n\t\t\"tag\": \"latest\",\t\t\n\t\t\"cpu\": \"1\",\n\t\t\"machineType\": \"ci2xlarge\",\n\t\t\"memory\": \"1Gi\",\n\t\t\"command\": [\"cowsay\", \"whalesay\"],\n\t\t\"env\": {\n\t\t\t\"port\": \"3000\",\n\t\t\t\"host\": \"localhost\"\n\t\t},\n\t\t\"secret_env\" : {}\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/projects/{{project_id}}/jobs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"projects",
								"{{project_id}}",
								"jobs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Job with missing job name in body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json(); ",
									"pm.test(\"Response is Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"jobs\",\n    \"attributes\": {\n    \t\"image\": \"docker/whalesay\",\n\t\t\"tag\": \"latest\",\t\t\n\t\t\"cpu\": \"1\",\n\t\t\"memory\": \"1Gi\",\n\t\t\"command\": [\"cowsay\", \"whalesay\"],\n\t\t\"env\": {\n\t\t\t\"port\": \"3000\",\n\t\t\t\"host\": \"localhost\"\n\t\t},\n\t\t\"secret_env\" : {}\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/projects/{{project_id}}/jobs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"projects",
								"{{project_id}}",
								"jobs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Job with missing cpu , memory in body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json(); ",
									"pm.test(\"Response is Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"postman.setNextRequest(\"Create a Job with No cookie\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"jobs\",\n    \"attributes\": {\n    \t\"name\": \"job-name\",\n    \t\"image\": \"docker/whalesay\",\n\t\t\"tag\": \"latest\",\n\t\t\"command\": [\"cowsay\", \"whalesay\"],\n\t\t\"env\": {\n\t\t\t\"port\": \"3000\",\n\t\t\t\"host\": \"localhost\"\n\t\t},\n\t\t\"secret_env\" : {}\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/projects/{{project_id}}/jobs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"projects",
								"{{project_id}}",
								"jobs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Job with missing cpu , memory but with machine type in body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json(); ",
									"pm.test(\"Response is Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"jobs\",\n    \"attributes\": {\n    \t\"name\": \"job-name\",\n    \t\"machineType\": \"shared\",\n    \t\"image\": \"docker/whalesay\",\n\t\t\"tag\": \"latest\",\n\t\t\"command\": [\"cowsay\", \"whalesay\"],\n\t\t\"env\": {\n\t\t\t\"port\": \"3000\",\n\t\t\t\"host\": \"localhost\"\n\t\t},\n\t\t\"secret_env\" : {}\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/projects/{{project_id}}/jobs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"projects",
								"{{project_id}}",
								"jobs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Job with No cookie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is Bad Request\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({key: 'Cookie',value:\"\"})",
									"pm.request.headers.remove('Cookie')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/vnd.api+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"jobs\",\n    \"attributes\": {\n    \t\"name\": \"job-name\",\n    \t\"cpu\": \"1\",\n\t\t\"memory\": \"1Gi\",\n    \t\"image\": \"docker/whalesay\",\n\t\t\"tag\": \"latest\",\n\t\t\"command\": [\"cowsay\", \"whalesay\"],\n\t\t\"env\": {\n\t\t\t\"port\": \"3000\",\n\t\t\t\"host\": \"localhost\"\n\t\t},\n\t\t\"secret_env\" : {}\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/projects/{{project_id}}/jobs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"projects",
								"{{project_id}}",
								"jobs"
							]
						}
					},
					"response": []
				}
			],
			"description": "### Polly Jobs\nFollowing Api Test collection lets user to tests the Polly Jobs feature on [Polly](https://devpolly.elucidata.io).  Following are the supported in Polly Jobs under the user projects :\n*\tView All Jobs in a Project\n*\tCreate a Job in Project\n*\tView a Job in Project\n*\tDelete a Job  from Project\n*\tView Jobs logs\n\n## Important\nFor running the test cases, the developer has to change the follwing variables in this `Job Api` Test case collection project:\n*\tproject_id : Developer has to put their own project id\n*\tCookies : Some of the APIS require coookies to be passed.\n*\tIf developer is testing on localhost, he has to change following:\n\t*\tChange `USER_EMAIL` variable in `serverless.yaml` file to the email address of the user for devpolly account",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"postman.setGlobalVariable(\"base_url\", \"http://localhost:3000\")",
							"postman.setGlobalVariable(\"project_id\", \"2826\");",
							"eval(globals.setCookies);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}