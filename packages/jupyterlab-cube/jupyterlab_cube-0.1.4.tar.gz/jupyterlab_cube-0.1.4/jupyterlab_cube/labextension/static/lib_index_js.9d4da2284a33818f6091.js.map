{"version":3,"file":"lib_index_js.9d4da2284a33818f6091.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAAyC;AACC;AACJ;AACZ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,2BAA2B,mDAAM;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,6CAAe,CAAC,0DAAmB,CAAC,mDAAU,IAAI,YAAY;AAC1E;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,iEAAe,SAAS,EAAC;;;;;;;;;;;;;;;;;;;;ACnEC;AAC0C;AACtB;AAC9C,kBAAkB,iEAAU,YAAY,iEAAY;AACpD;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,KAAK;AACL,CAAC;AACc;AACf;AACA,YAAY,0DAAmB,UAAU,yBAAyB;AAClE,QAAQ,0DAAmB,YAAY,sJAAsJ;AAC7L,QAAQ,0DAAmB,YAAY,kCAAkC;AACzE,YAAY,0DAAmB,CAAC,6DAAM,IAAI,2DAA2D;AACrG;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnB0B;AACS;AACH;AACU;AACE;AACU;AACY;AACpB;AACF;AACE;AAC9C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACO,yBAAyB,wDAAe;AAC/C;AACA;AACA;AACA;AACA,4CAA4C,0BAA0B;AACtE;AACA;AACA,4CAA4C,0BAA0B;AACtE;AACA;AACA;AACA;AACA,wCAAwC,qCAAqC;AAC7E,4BAA4B,2BAA2B;AACvD;AACA;AACA;AACA;AACA;AACA,iCAAiC,uBAAuB;AACxD;AACA;AACA,iCAAiC,uBAAuB;AACxD;AACA;AACA;AACA;AACA;AACA,iCAAiC,kBAAkB;AACnD;AACA;AACA,iCAAiC,kBAAkB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,4BAA4B,4BAA4B;AACxD;AACA;AACA;AACA,oBAAoB,gDAAU;AAC9B,uBAAuB;AACvB;AACA,YAAY,+DAA0B,aAAa,yDAAoB;AACvE;AACA,8BAA8B,8CAAS,cAAc,iBAAiB;AACtE;AACA,kDAAkD,oBAAoB;AACtE,+CAA+C,aAAa;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAmB,UAAU,wBAAwB;AACrE,YAAY,0DAAmB,CAAC,2DAAI,IAAI,yDAAyD,qBAAqB;AACtH,gBAAgB,0DAAmB,CAAC,2DAAI,IAAI,mBAAmB;AAC/D,oBAAoB,0DAAmB,UAAU;AACjD;AACA;AACA;AACA,2BAA2B;AAC3B,gBAAgB,0DAAmB,CAAC,2DAAI,IAAI,mBAAmB;AAC/D,oBAAoB,0DAAmB,CAAC,6DAAM,IAAI,qOAAqO;AACvR,gBAAgB,0DAAmB,CAAC,2DAAI,IAAI,mBAAmB;AAC/D,oBAAoB,0DAAmB,CAAC,6DAAM,IAAI,mQAAmQ;AACrT,YAAY,0DAAmB,CAAC,2DAAI,IAAI,qFAAqF,qBAAqB;AAClJ,gBAAgB,0DAAmB,CAAC,iEAAU,IAAI,iIAAiI;AACnL,oBAAoB,0DAAmB,CAAC,uEAAgB,IAAI,yBAAyB,0DAAmB,CAAC,4DAAK,yBAAyB;AACvI,oBAAoB,0DAAmB,CAAC,uEAAgB,IAAI,yBAAyB,0DAAmB,CAAC,4DAAK,yBAAyB;AACvI,oBAAoB,0DAAmB,CAAC,uEAAgB,IAAI,wBAAwB,0DAAmB,CAAC,4DAAK,wBAAwB;AACrI,oBAAoB,0DAAmB,CAAC,uEAAgB,IAAI,0BAA0B,0DAAmB,CAAC,4DAAK,0BAA0B;AACzI,gBAAgB,0DAAmB,CAAC,mDAAa,IAAI,8BAA8B;AACnF,gBAAgB,0DAAmB,CAAC,6DAAM,IAAI,uFAAuF;AACrI;AACA","sources":["webpack://jupyterlab-cube/./lib/index.js","webpack://jupyterlab-cube/./lib/uploadbuttons.js","webpack://jupyterlab-cube/./lib/visualizer.js"],"sourcesContent":["import { Widget } from '@lumino/widgets';\nimport { Visualizer } from './visualizer';\nimport * as ReactDOM from 'react-dom';\nimport React from 'react';\n/**\n * The default mime type for the extension.\n */\nconst MIME_TYPE = 'application/osscar.cube';\n/**\n * The class name added to the extension.\n */\nconst CLASS_NAME = 'mimerenderer-cube';\n/**\n * A widget for rendering cube.\n */\nexport class OutputWidget extends Widget {\n    /**\n     * Construct a new output widget.\n     */\n    constructor(options) {\n        super();\n        this._mimeType = options.mimeType;\n        this.addClass(CLASS_NAME);\n    }\n    /**\n     * Render cube into this widget's node.\n     */\n    renderModel(model) {\n        const data = model.data[this._mimeType];\n        return new Promise((resolve, reject) => {\n            ReactDOM.render(React.createElement(Visualizer, { data: data }), this.node, () => {\n                resolve();\n            });\n        });\n    }\n}\n/**\n * A mime renderer factory for cube data.\n */\nexport const rendererFactory = {\n    safe: true,\n    mimeTypes: [MIME_TYPE],\n    createRenderer: (options) => new OutputWidget(options),\n};\n/**\n * Extension definition.\n */\nconst extension = {\n    id: 'jupyterlab-cube:plugin',\n    rendererFactory,\n    rank: 100,\n    dataType: 'string',\n    fileTypes: [\n        {\n            name: 'cube',\n            mimeTypes: [MIME_TYPE],\n            extensions: ['.cube', '.cub'],\n            iconClass: 'jp-MaterialIcon jp-CubeIcon',\n        },\n    ],\n    documentWidgetFactoryOptions: {\n        name: 'cube viewer',\n        primaryFileType: 'cube',\n        fileTypes: ['cube'],\n        defaultFor: ['cube'],\n    },\n};\nexport default extension;\n","import React from 'react';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nconst useStyles = makeStyles((theme) => createStyles({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n        },\n    },\n    input: {\n        display: 'none',\n    },\n}));\nexport default function UploadButtons(Props) {\n    const classes = useStyles();\n    return (React.createElement(\"div\", { className: classes.root },\n        React.createElement(\"input\", { accept: \".pdb, .cif, .ent, .gz, .sdf\", className: classes.input, id: \"contained-button-file\", multiple: true, type: \"file\", onChange: Props.onChange }),\n        React.createElement(\"label\", { htmlFor: \"contained-button-file\" },\n            React.createElement(Button, { variant: \"contained\", color: \"primary\", component: \"span\" }, \"Upload Structure\"))));\n}\n","import React from 'react';\nimport * as NGL from '@osscar/ngl';\nimport * as _ from 'underscore';\nimport Grid from '@material-ui/core/Grid';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Slider from '@material-ui/core/Slider';\nimport UploadButtons from './uploadbuttons';\nimport Switch from '@material-ui/core/Switch';\nconst marks1 = [\n    {\n        value: 0,\n        label: '0%',\n    },\n    {\n        value: 20,\n        label: '20%',\n    },\n    {\n        value: 40,\n        label: '40%',\n    },\n    {\n        value: 60,\n        label: '60%',\n    },\n    {\n        value: 80,\n        label: '80%',\n    },\n    {\n        value: 100,\n        label: '100%',\n    },\n];\nconst marks2 = [\n    {\n        value: -0.02,\n        label: '-0.02',\n    },\n    {\n        value: -0.01,\n        label: '-0.01',\n    },\n    {\n        value: 0,\n        label: '0',\n    },\n    {\n        value: 0.01,\n        label: '0.01',\n    },\n    {\n        value: 0.02,\n        label: '0.02',\n    },\n];\nexport class Visualizer extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.toggle_backgroundColor = () => {\n            if (this.dark) {\n                this._stage.setParameters({ backgroundColor: 'white' });\n            }\n            else {\n                this._stage.setParameters({ backgroundColor: 'black' });\n            }\n            this.dark = !this.dark;\n        };\n        this.handleRadioChange = (event) => {\n            this._stage.setParameters({ backgroundColor: event.target.value });\n            this.setState({ value: event.target.value });\n        };\n        this.handleOpacityChange = (event, value) => {\n            const transparency = value / 100.0;\n            this._stage\n                .getRepresentationsByName('positive_surface')\n                .setParameters({ opacity: transparency });\n            this._stage\n                .getRepresentationsByName('negative_surface')\n                .setParameters({ opacity: transparency });\n        };\n        this.handleIsovalueChange = (event, value) => {\n            const val = value;\n            this._stage\n                .getRepresentationsByName('positive_surface')\n                .setParameters({ isolevel: val[1] });\n            this._stage\n                .getRepresentationsByName('negative_surface')\n                .setParameters({ isolevel: val[0] });\n        };\n        this.loadStructure = (event) => {\n            this._stage.loadFile(event.target.files[0]).then((o) => {\n                o.addRepresentation('ball+stick', {\n                    name: 'structure',\n                    visible: true,\n                });\n            });\n        };\n        this.toggleSpin = (event) => {\n            this.setState({ spin: event.target.checked });\n            this._stage.toggleSpin();\n        };\n        this.dark = true;\n        this.uuid = _.uniqueId('ngl_');\n        this.state = { value: 'black', spin: false };\n        window.requestAnimationFrame(() => {\n            NGL.DatasourceRegistry.add('data', new NGL.StaticDatasource('//cdn.rawgit.com/arose/ngl/v2.0.0-dev.32/data/'));\n            // Create NGL Stage object\n            this._stage = new NGL.Stage(this.uuid, { quality: 'high' });\n            const data = this.props.data;\n            const stringBlob = new Blob([data], { type: 'text/plain' });\n            this._stage.loadFile(stringBlob, { ext: 'cube' }).then((o) => {\n                o.addRepresentation('surface', {\n                    name: 'positive_surface',\n                    visible: true,\n                    isolevelType: 'value',\n                    isolevel: 0.01,\n                    color: 'red',\n                    opacity: 0.7,\n                    opaqueBack: false,\n                });\n                o.addRepresentation('surface', {\n                    name: 'negative_surface',\n                    visible: true,\n                    isolevelType: 'value',\n                    isolevel: -0.01,\n                    color: 'blue',\n                    opacity: 0.7,\n                    opaqueBack: false,\n                });\n                o.autoView();\n            }),\n                function (e) {\n                    console.log('information:' + e);\n                };\n        });\n    }\n    valuetext(value) {\n        return String(value) + '%';\n    }\n    render() {\n        return (React.createElement(\"div\", { className: \"container\" },\n            React.createElement(Grid, { container: true, spacing: 3, justify: \"center\", style: { marginTop: '20px' } },\n                React.createElement(Grid, { item: true, sm: 8 },\n                    React.createElement(\"div\", { id: this.uuid, style: {\n                            width: '100%',\n                            height: '400px',\n                            backgroundColor: 'black',\n                        } })),\n                React.createElement(Grid, { item: true, sm: 1 },\n                    React.createElement(Slider, { orientation: \"vertical\", getAriaValueText: this.valuetext, valueLabelDisplay: \"auto\", defaultValue: 70, \"aria-labelledby\": \"vertical-slider\", min: 0, max: 100, marks: marks1, onChange: this.handleOpacityChange, color: 'primary' })),\n                React.createElement(Grid, { item: true, sm: 1 },\n                    React.createElement(Slider, { orientation: \"vertical\", defaultValue: [0.01, -0.01], \"aria-labelledby\": \"vertical-slider\", getAriaValueText: this.valuetext, valueLabelDisplay: \"on\", marks: marks2, min: -0.02, max: 0.02, step: 0.001, onChange: this.handleIsovalueChange, color: 'secondary' }))),\n            React.createElement(Grid, { container: true, direction: \"row\", justify: \"center\", alignItems: \"center\", style: { marginTop: '20px' } },\n                React.createElement(RadioGroup, { \"aria-label\": \"backgroundcolor\", name: \"backgroundcolor1\", value: this.state.value, onChange: this.handleRadioChange, row: true },\n                    React.createElement(FormControlLabel, { value: \"black\", control: React.createElement(Radio, null), label: \"Black\" }),\n                    React.createElement(FormControlLabel, { value: \"white\", control: React.createElement(Radio, null), label: \"White\" }),\n                    React.createElement(FormControlLabel, { value: \"gray\", control: React.createElement(Radio, null), label: \"Gray\" }),\n                    React.createElement(FormControlLabel, { value: \"yellow\", control: React.createElement(Radio, null), label: \"Yellow\" })),\n                React.createElement(UploadButtons, { onChange: this.loadStructure }),\n                React.createElement(Switch, { checked: this.state.spin, onChange: this.toggleSpin, name: \"spin\", color: \"secondary\" }))));\n    }\n}\n"],"names":[],"sourceRoot":""}