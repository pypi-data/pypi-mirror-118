"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.lambda_.delete_provisioned_concurrency_config
hub.exec.boto3.client.lambda_.get_provisioned_concurrency_config
hub.exec.boto3.client.lambda_.list_provisioned_concurrency_configs
hub.exec.boto3.client.lambda_.put_provisioned_concurrency_config
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, function_name: Text, qualifier: Text, provisioned_concurrent_executions: int)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Adds a provisioned concurrency configuration to a function's alias or version.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        function_name(Text): The name of the Lambda function.  Name formats     Function name - my-function.    Function ARN
            - arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN -
            123456789012:function:my-function.   The length constraint applies only to the full ARN. If you
            specify only the function name, it is limited to 64 characters in length.
        qualifier(Text): The version number or alias name.
        provisioned_concurrent_executions(int): The amount of provisioned concurrency to allocate for the version or alias.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.lambda_.provisioned_concurrency_config.present:
                - name: value
                - function_name: value
                - qualifier: value
                - provisioned_concurrent_executions: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.lambda_.provisioned_concurrency_config.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.lambda_.get_provisioned_concurrency_config(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.lambda_.put_provisioned_concurrency_config(
                ctx,
                
                
                **{"FunctionName": function_name, "Qualifier": qualifier, "ProvisionedConcurrentExecutions": provisioned_concurrent_executions}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.lambda_.get_provisioned_concurrency_config(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, function_name: Text, qualifier: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes the provisioned concurrency configuration for a function.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        function_name(Text): The name of the Lambda function.  Name formats     Function name - my-function.    Function ARN
            - arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN -
            123456789012:function:my-function.   The length constraint applies only to the full ARN. If you
            specify only the function name, it is limited to 64 characters in length.
        qualifier(Text): The version number or alias name.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.lambda_.provisioned_concurrency_config.absent:
                - name: value
                - function_name: value
                - qualifier: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.lambda_.provisioned_concurrency_config.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.lambda_.get_provisioned_concurrency_config(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.lambda_.delete_provisioned_concurrency_config(
                ctx,
                
                
                **{"FunctionName": function_name, "Qualifier": qualifier}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.lambda_.get_provisioned_concurrency_config(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

