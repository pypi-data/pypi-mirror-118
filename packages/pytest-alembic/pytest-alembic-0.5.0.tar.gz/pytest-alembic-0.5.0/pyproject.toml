[tool.poetry]
name = "pytest-alembic"
version = "0.5.0"
description = "A pytest plugin for verifying alembic migrations."
authors = [
    "Dan Cardin <ddcardin@gmail.com>",
]
license = "MIT"
keywords = [ "pytest", "sqlalchemy", "alembic", "migration", "revision" ]
classifiers = [ "Framework :: Pytest" ]
repository = "https://github.com/schireson/pytest-alembic"
packages = [
    { include = "pytest_alembic", from = "src" },
]
readme = 'README.md'
include = [
    "*.md",
]

[tool.poetry.dependencies]
python = ">=3.5, <4"

pytest = {version = ">=1.0"}
alembic = "*"
sqlalchemy = "*"
dataclasses = {version = "*", python = "<3.7" }

[tool.poetry.dev-dependencies]
bandit = "*"
black = {version = "=>19.3b0", allow-prereleases = true, python = ">=3.6"}
coverage = ">=5"
flake8 = ">=3.9"
isort = "*"
mypy = {version = "*", python = ">=3.5"}
psycopg2-binary = "*"
pydocstyle = {version = "*", python = ">=3.5"}
pytest-mock-resources = {version = "*"}
types-dataclasses = "^0.1.7"

[tool.poetry.plugins.pytest11]
pytest_alembic = "pytest_alembic.plugin"

[tool.isort]
default_section = 'FIRSTPARTY'
include_trailing_comma = true
indent = '    '
length_sort = false
line_length = 100
multi_line_output = 3
order_by_type = false
known_first_party = 'tests'
use_parentheses = true

[tool.black]
line_length = 100

[tool.coverage.report]
show_missing = true
skip_covered = true
exclude_lines = [
  "pragma: no cover",
  "if TYPE_CHECKING:",
  "if __name__ == .__main__.:",
]

[tool.coverage.run]
source = ["src"]
branch = true
parallel = true

[tool.pytest.ini_options]
doctest_optionflags = "NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL ELLIPSIS"
addopts = "--doctest-modules -vv --ff --strict-markers"
pytest_alembic_exclude = 'up_down_consistency'
norecursedirs = ".* build dist *.egg"
pytester_example_dir = "examples"
filterwarnings = [
  "ignore:.*testdir.copy_example"
]

[tool.mypy]
strict_optional = true
ignore_missing_imports = true
warn_unused_ignores = true
incremental = true

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"
