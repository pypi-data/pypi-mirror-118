# coding: utf-8

"""
    DocuSign Admin API

    An API for an organization administrator to manage organizations, accounts and users  # noqa: E501

    OpenAPI spec version: v2
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrganizationAccountSettingsImportResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'last_modified': 'datetime',
        'completed': 'datetime',
        'expires': 'datetime',
        'percent_completed': 'int',
        'number_processed_accounts': 'int',
        'number_unprocessed_accounts': 'int',
        'results': 'list[OrganizationAccountSettingsImportResultResponse]',
        'success': 'bool',
        'skipped_settings_by_account': 'dict(str, list[str])',
        'id': 'str',
        'organization_id': 'str',
        'status': 'str',
        'type': 'str',
        'requestor': 'OrganizationAccountSettingsImportRequestorResponse'
    }

    attribute_map = {
        'created': 'created',
        'last_modified': 'last_modified',
        'completed': 'completed',
        'expires': 'expires',
        'percent_completed': 'percent_completed',
        'number_processed_accounts': 'number_processed_accounts',
        'number_unprocessed_accounts': 'number_unprocessed_accounts',
        'results': 'results',
        'success': 'success',
        'skipped_settings_by_account': 'skipped_settings_by_account',
        'id': 'id',
        'organization_id': 'organization_id',
        'status': 'status',
        'type': 'type',
        'requestor': 'requestor'
    }

    def __init__(self, created=None, last_modified=None, completed=None, expires=None, percent_completed=None, number_processed_accounts=None, number_unprocessed_accounts=None, results=None, success=None, skipped_settings_by_account=None, id=None, organization_id=None, status=None, type=None, requestor=None):  # noqa: E501
        """OrganizationAccountSettingsImportResponse - a model defined in Swagger"""  # noqa: E501

        self._created = None
        self._last_modified = None
        self._completed = None
        self._expires = None
        self._percent_completed = None
        self._number_processed_accounts = None
        self._number_unprocessed_accounts = None
        self._results = None
        self._success = None
        self._skipped_settings_by_account = None
        self._id = None
        self._organization_id = None
        self._status = None
        self._type = None
        self._requestor = None
        self.discriminator = None

        if created is not None:
            self.created = created
        if last_modified is not None:
            self.last_modified = last_modified
        if completed is not None:
            self.completed = completed
        if expires is not None:
            self.expires = expires
        if percent_completed is not None:
            self.percent_completed = percent_completed
        if number_processed_accounts is not None:
            self.number_processed_accounts = number_processed_accounts
        if number_unprocessed_accounts is not None:
            self.number_unprocessed_accounts = number_unprocessed_accounts
        if results is not None:
            self.results = results
        if success is not None:
            self.success = success
        if skipped_settings_by_account is not None:
            self.skipped_settings_by_account = skipped_settings_by_account
        if id is not None:
            self.id = id
        if organization_id is not None:
            self.organization_id = organization_id
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type
        if requestor is not None:
            self.requestor = requestor

    @property
    def created(self):
        """Gets the created of this OrganizationAccountSettingsImportResponse.  # noqa: E501


        :return: The created of this OrganizationAccountSettingsImportResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this OrganizationAccountSettingsImportResponse.


        :param created: The created of this OrganizationAccountSettingsImportResponse.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def last_modified(self):
        """Gets the last_modified of this OrganizationAccountSettingsImportResponse.  # noqa: E501


        :return: The last_modified of this OrganizationAccountSettingsImportResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this OrganizationAccountSettingsImportResponse.


        :param last_modified: The last_modified of this OrganizationAccountSettingsImportResponse.  # noqa: E501
        :type: datetime
        """

        self._last_modified = last_modified

    @property
    def completed(self):
        """Gets the completed of this OrganizationAccountSettingsImportResponse.  # noqa: E501


        :return: The completed of this OrganizationAccountSettingsImportResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this OrganizationAccountSettingsImportResponse.


        :param completed: The completed of this OrganizationAccountSettingsImportResponse.  # noqa: E501
        :type: datetime
        """

        self._completed = completed

    @property
    def expires(self):
        """Gets the expires of this OrganizationAccountSettingsImportResponse.  # noqa: E501


        :return: The expires of this OrganizationAccountSettingsImportResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this OrganizationAccountSettingsImportResponse.


        :param expires: The expires of this OrganizationAccountSettingsImportResponse.  # noqa: E501
        :type: datetime
        """

        self._expires = expires

    @property
    def percent_completed(self):
        """Gets the percent_completed of this OrganizationAccountSettingsImportResponse.  # noqa: E501


        :return: The percent_completed of this OrganizationAccountSettingsImportResponse.  # noqa: E501
        :rtype: int
        """
        return self._percent_completed

    @percent_completed.setter
    def percent_completed(self, percent_completed):
        """Sets the percent_completed of this OrganizationAccountSettingsImportResponse.


        :param percent_completed: The percent_completed of this OrganizationAccountSettingsImportResponse.  # noqa: E501
        :type: int
        """

        self._percent_completed = percent_completed

    @property
    def number_processed_accounts(self):
        """Gets the number_processed_accounts of this OrganizationAccountSettingsImportResponse.  # noqa: E501


        :return: The number_processed_accounts of this OrganizationAccountSettingsImportResponse.  # noqa: E501
        :rtype: int
        """
        return self._number_processed_accounts

    @number_processed_accounts.setter
    def number_processed_accounts(self, number_processed_accounts):
        """Sets the number_processed_accounts of this OrganizationAccountSettingsImportResponse.


        :param number_processed_accounts: The number_processed_accounts of this OrganizationAccountSettingsImportResponse.  # noqa: E501
        :type: int
        """

        self._number_processed_accounts = number_processed_accounts

    @property
    def number_unprocessed_accounts(self):
        """Gets the number_unprocessed_accounts of this OrganizationAccountSettingsImportResponse.  # noqa: E501


        :return: The number_unprocessed_accounts of this OrganizationAccountSettingsImportResponse.  # noqa: E501
        :rtype: int
        """
        return self._number_unprocessed_accounts

    @number_unprocessed_accounts.setter
    def number_unprocessed_accounts(self, number_unprocessed_accounts):
        """Sets the number_unprocessed_accounts of this OrganizationAccountSettingsImportResponse.


        :param number_unprocessed_accounts: The number_unprocessed_accounts of this OrganizationAccountSettingsImportResponse.  # noqa: E501
        :type: int
        """

        self._number_unprocessed_accounts = number_unprocessed_accounts

    @property
    def results(self):
        """Gets the results of this OrganizationAccountSettingsImportResponse.  # noqa: E501


        :return: The results of this OrganizationAccountSettingsImportResponse.  # noqa: E501
        :rtype: list[OrganizationAccountSettingsImportResultResponse]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this OrganizationAccountSettingsImportResponse.


        :param results: The results of this OrganizationAccountSettingsImportResponse.  # noqa: E501
        :type: list[OrganizationAccountSettingsImportResultResponse]
        """

        self._results = results

    @property
    def success(self):
        """Gets the success of this OrganizationAccountSettingsImportResponse.  # noqa: E501


        :return: The success of this OrganizationAccountSettingsImportResponse.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this OrganizationAccountSettingsImportResponse.


        :param success: The success of this OrganizationAccountSettingsImportResponse.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def skipped_settings_by_account(self):
        """Gets the skipped_settings_by_account of this OrganizationAccountSettingsImportResponse.  # noqa: E501


        :return: The skipped_settings_by_account of this OrganizationAccountSettingsImportResponse.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._skipped_settings_by_account

    @skipped_settings_by_account.setter
    def skipped_settings_by_account(self, skipped_settings_by_account):
        """Sets the skipped_settings_by_account of this OrganizationAccountSettingsImportResponse.


        :param skipped_settings_by_account: The skipped_settings_by_account of this OrganizationAccountSettingsImportResponse.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._skipped_settings_by_account = skipped_settings_by_account

    @property
    def id(self):
        """Gets the id of this OrganizationAccountSettingsImportResponse.  # noqa: E501


        :return: The id of this OrganizationAccountSettingsImportResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrganizationAccountSettingsImportResponse.


        :param id: The id of this OrganizationAccountSettingsImportResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def organization_id(self):
        """Gets the organization_id of this OrganizationAccountSettingsImportResponse.  # noqa: E501


        :return: The organization_id of this OrganizationAccountSettingsImportResponse.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this OrganizationAccountSettingsImportResponse.


        :param organization_id: The organization_id of this OrganizationAccountSettingsImportResponse.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def status(self):
        """Gets the status of this OrganizationAccountSettingsImportResponse.  # noqa: E501


        :return: The status of this OrganizationAccountSettingsImportResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrganizationAccountSettingsImportResponse.


        :param status: The status of this OrganizationAccountSettingsImportResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this OrganizationAccountSettingsImportResponse.  # noqa: E501


        :return: The type of this OrganizationAccountSettingsImportResponse.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrganizationAccountSettingsImportResponse.


        :param type: The type of this OrganizationAccountSettingsImportResponse.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def requestor(self):
        """Gets the requestor of this OrganizationAccountSettingsImportResponse.  # noqa: E501


        :return: The requestor of this OrganizationAccountSettingsImportResponse.  # noqa: E501
        :rtype: OrganizationAccountSettingsImportRequestorResponse
        """
        return self._requestor

    @requestor.setter
    def requestor(self, requestor):
        """Sets the requestor of this OrganizationAccountSettingsImportResponse.


        :param requestor: The requestor of this OrganizationAccountSettingsImportResponse.  # noqa: E501
        :type: OrganizationAccountSettingsImportRequestorResponse
        """

        self._requestor = requestor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrganizationAccountSettingsImportResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationAccountSettingsImportResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
