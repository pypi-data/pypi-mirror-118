# coding: utf-8

"""
    DocuSign Admin API

    An API for an organization administrator to manage organizations, accounts and users  # noqa: E501

    OpenAPI spec version: v2
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrganizationUserResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'user_name': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'user_status': 'str',
        'membership_status': 'str',
        'email': 'str',
        'created_on': 'datetime',
        'membership_created_on': 'datetime',
        'ds_groups': 'list[DSGroupResponse]',
        'membership_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'user_name': 'user_name',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'user_status': 'user_status',
        'membership_status': 'membership_status',
        'email': 'email',
        'created_on': 'created_on',
        'membership_created_on': 'membership_created_on',
        'ds_groups': 'ds_groups',
        'membership_id': 'membership_id'
    }

    def __init__(self, id=None, user_name=None, first_name=None, last_name=None, user_status=None, membership_status=None, email=None, created_on=None, membership_created_on=None, ds_groups=None, membership_id=None):  # noqa: E501
        """OrganizationUserResponse - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._user_name = None
        self._first_name = None
        self._last_name = None
        self._user_status = None
        self._membership_status = None
        self._email = None
        self._created_on = None
        self._membership_created_on = None
        self._ds_groups = None
        self._membership_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if user_name is not None:
            self.user_name = user_name
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if user_status is not None:
            self.user_status = user_status
        if membership_status is not None:
            self.membership_status = membership_status
        if email is not None:
            self.email = email
        if created_on is not None:
            self.created_on = created_on
        if membership_created_on is not None:
            self.membership_created_on = membership_created_on
        if ds_groups is not None:
            self.ds_groups = ds_groups
        if membership_id is not None:
            self.membership_id = membership_id

    @property
    def id(self):
        """Gets the id of this OrganizationUserResponse.  # noqa: E501


        :return: The id of this OrganizationUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrganizationUserResponse.


        :param id: The id of this OrganizationUserResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def user_name(self):
        """Gets the user_name of this OrganizationUserResponse.  # noqa: E501


        :return: The user_name of this OrganizationUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this OrganizationUserResponse.


        :param user_name: The user_name of this OrganizationUserResponse.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def first_name(self):
        """Gets the first_name of this OrganizationUserResponse.  # noqa: E501


        :return: The first_name of this OrganizationUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this OrganizationUserResponse.


        :param first_name: The first_name of this OrganizationUserResponse.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this OrganizationUserResponse.  # noqa: E501


        :return: The last_name of this OrganizationUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this OrganizationUserResponse.


        :param last_name: The last_name of this OrganizationUserResponse.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def user_status(self):
        """Gets the user_status of this OrganizationUserResponse.  # noqa: E501


        :return: The user_status of this OrganizationUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._user_status

    @user_status.setter
    def user_status(self, user_status):
        """Sets the user_status of this OrganizationUserResponse.


        :param user_status: The user_status of this OrganizationUserResponse.  # noqa: E501
        :type: str
        """

        self._user_status = user_status

    @property
    def membership_status(self):
        """Gets the membership_status of this OrganizationUserResponse.  # noqa: E501


        :return: The membership_status of this OrganizationUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._membership_status

    @membership_status.setter
    def membership_status(self, membership_status):
        """Sets the membership_status of this OrganizationUserResponse.


        :param membership_status: The membership_status of this OrganizationUserResponse.  # noqa: E501
        :type: str
        """

        self._membership_status = membership_status

    @property
    def email(self):
        """Gets the email of this OrganizationUserResponse.  # noqa: E501


        :return: The email of this OrganizationUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this OrganizationUserResponse.


        :param email: The email of this OrganizationUserResponse.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def created_on(self):
        """Gets the created_on of this OrganizationUserResponse.  # noqa: E501


        :return: The created_on of this OrganizationUserResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this OrganizationUserResponse.


        :param created_on: The created_on of this OrganizationUserResponse.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def membership_created_on(self):
        """Gets the membership_created_on of this OrganizationUserResponse.  # noqa: E501


        :return: The membership_created_on of this OrganizationUserResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._membership_created_on

    @membership_created_on.setter
    def membership_created_on(self, membership_created_on):
        """Sets the membership_created_on of this OrganizationUserResponse.


        :param membership_created_on: The membership_created_on of this OrganizationUserResponse.  # noqa: E501
        :type: datetime
        """

        self._membership_created_on = membership_created_on

    @property
    def ds_groups(self):
        """Gets the ds_groups of this OrganizationUserResponse.  # noqa: E501


        :return: The ds_groups of this OrganizationUserResponse.  # noqa: E501
        :rtype: list[DSGroupResponse]
        """
        return self._ds_groups

    @ds_groups.setter
    def ds_groups(self, ds_groups):
        """Sets the ds_groups of this OrganizationUserResponse.


        :param ds_groups: The ds_groups of this OrganizationUserResponse.  # noqa: E501
        :type: list[DSGroupResponse]
        """

        self._ds_groups = ds_groups

    @property
    def membership_id(self):
        """Gets the membership_id of this OrganizationUserResponse.  # noqa: E501


        :return: The membership_id of this OrganizationUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._membership_id

    @membership_id.setter
    def membership_id(self, membership_id):
        """Sets the membership_id of this OrganizationUserResponse.


        :param membership_id: The membership_id of this OrganizationUserResponse.  # noqa: E501
        :type: str
        """

        self._membership_id = membership_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrganizationUserResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationUserResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
