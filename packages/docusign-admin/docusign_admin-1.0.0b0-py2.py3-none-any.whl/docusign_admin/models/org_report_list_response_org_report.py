# coding: utf-8

"""
    DocuSign Admin API

    An API for an organization administrator to manage organizations, accounts and users  # noqa: E501

    OpenAPI spec version: v2
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrgReportListResponseOrgReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'complete': 'bool',
        'report_correlation_id': 'str',
        'site_id': 'int',
        'report_id': 'str',
        'requestor': 'OrgReportListResponseRequestor',
        'created_on': 'datetime',
        'account_export_count': 'int',
        'url': 'str',
        'report_type_id': 'str',
        'report_date_range': 'str',
        'custom_start_date': 'datetime',
        'custom_end_date': 'datetime'
    }

    attribute_map = {
        'complete': 'complete',
        'report_correlation_id': 'report_correlation_id',
        'site_id': 'site_id',
        'report_id': 'report_id',
        'requestor': 'requestor',
        'created_on': 'created_on',
        'account_export_count': 'account_export_count',
        'url': 'url',
        'report_type_id': 'report_type_id',
        'report_date_range': 'report_date_range',
        'custom_start_date': 'custom_start_date',
        'custom_end_date': 'custom_end_date'
    }

    def __init__(self, complete=None, report_correlation_id=None, site_id=None, report_id=None, requestor=None, created_on=None, account_export_count=None, url=None, report_type_id=None, report_date_range=None, custom_start_date=None, custom_end_date=None):  # noqa: E501
        """OrgReportListResponseOrgReport - a model defined in Swagger"""  # noqa: E501

        self._complete = None
        self._report_correlation_id = None
        self._site_id = None
        self._report_id = None
        self._requestor = None
        self._created_on = None
        self._account_export_count = None
        self._url = None
        self._report_type_id = None
        self._report_date_range = None
        self._custom_start_date = None
        self._custom_end_date = None
        self.discriminator = None

        if complete is not None:
            self.complete = complete
        if report_correlation_id is not None:
            self.report_correlation_id = report_correlation_id
        if site_id is not None:
            self.site_id = site_id
        if report_id is not None:
            self.report_id = report_id
        if requestor is not None:
            self.requestor = requestor
        if created_on is not None:
            self.created_on = created_on
        if account_export_count is not None:
            self.account_export_count = account_export_count
        if url is not None:
            self.url = url
        if report_type_id is not None:
            self.report_type_id = report_type_id
        if report_date_range is not None:
            self.report_date_range = report_date_range
        if custom_start_date is not None:
            self.custom_start_date = custom_start_date
        if custom_end_date is not None:
            self.custom_end_date = custom_end_date

    @property
    def complete(self):
        """Gets the complete of this OrgReportListResponseOrgReport.  # noqa: E501


        :return: The complete of this OrgReportListResponseOrgReport.  # noqa: E501
        :rtype: bool
        """
        return self._complete

    @complete.setter
    def complete(self, complete):
        """Sets the complete of this OrgReportListResponseOrgReport.


        :param complete: The complete of this OrgReportListResponseOrgReport.  # noqa: E501
        :type: bool
        """

        self._complete = complete

    @property
    def report_correlation_id(self):
        """Gets the report_correlation_id of this OrgReportListResponseOrgReport.  # noqa: E501


        :return: The report_correlation_id of this OrgReportListResponseOrgReport.  # noqa: E501
        :rtype: str
        """
        return self._report_correlation_id

    @report_correlation_id.setter
    def report_correlation_id(self, report_correlation_id):
        """Sets the report_correlation_id of this OrgReportListResponseOrgReport.


        :param report_correlation_id: The report_correlation_id of this OrgReportListResponseOrgReport.  # noqa: E501
        :type: str
        """

        self._report_correlation_id = report_correlation_id

    @property
    def site_id(self):
        """Gets the site_id of this OrgReportListResponseOrgReport.  # noqa: E501


        :return: The site_id of this OrgReportListResponseOrgReport.  # noqa: E501
        :rtype: int
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this OrgReportListResponseOrgReport.


        :param site_id: The site_id of this OrgReportListResponseOrgReport.  # noqa: E501
        :type: int
        """

        self._site_id = site_id

    @property
    def report_id(self):
        """Gets the report_id of this OrgReportListResponseOrgReport.  # noqa: E501


        :return: The report_id of this OrgReportListResponseOrgReport.  # noqa: E501
        :rtype: str
        """
        return self._report_id

    @report_id.setter
    def report_id(self, report_id):
        """Sets the report_id of this OrgReportListResponseOrgReport.


        :param report_id: The report_id of this OrgReportListResponseOrgReport.  # noqa: E501
        :type: str
        """

        self._report_id = report_id

    @property
    def requestor(self):
        """Gets the requestor of this OrgReportListResponseOrgReport.  # noqa: E501


        :return: The requestor of this OrgReportListResponseOrgReport.  # noqa: E501
        :rtype: OrgReportListResponseRequestor
        """
        return self._requestor

    @requestor.setter
    def requestor(self, requestor):
        """Sets the requestor of this OrgReportListResponseOrgReport.


        :param requestor: The requestor of this OrgReportListResponseOrgReport.  # noqa: E501
        :type: OrgReportListResponseRequestor
        """

        self._requestor = requestor

    @property
    def created_on(self):
        """Gets the created_on of this OrgReportListResponseOrgReport.  # noqa: E501


        :return: The created_on of this OrgReportListResponseOrgReport.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this OrgReportListResponseOrgReport.


        :param created_on: The created_on of this OrgReportListResponseOrgReport.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def account_export_count(self):
        """Gets the account_export_count of this OrgReportListResponseOrgReport.  # noqa: E501


        :return: The account_export_count of this OrgReportListResponseOrgReport.  # noqa: E501
        :rtype: int
        """
        return self._account_export_count

    @account_export_count.setter
    def account_export_count(self, account_export_count):
        """Sets the account_export_count of this OrgReportListResponseOrgReport.


        :param account_export_count: The account_export_count of this OrgReportListResponseOrgReport.  # noqa: E501
        :type: int
        """

        self._account_export_count = account_export_count

    @property
    def url(self):
        """Gets the url of this OrgReportListResponseOrgReport.  # noqa: E501


        :return: The url of this OrgReportListResponseOrgReport.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this OrgReportListResponseOrgReport.


        :param url: The url of this OrgReportListResponseOrgReport.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def report_type_id(self):
        """Gets the report_type_id of this OrgReportListResponseOrgReport.  # noqa: E501


        :return: The report_type_id of this OrgReportListResponseOrgReport.  # noqa: E501
        :rtype: str
        """
        return self._report_type_id

    @report_type_id.setter
    def report_type_id(self, report_type_id):
        """Sets the report_type_id of this OrgReportListResponseOrgReport.


        :param report_type_id: The report_type_id of this OrgReportListResponseOrgReport.  # noqa: E501
        :type: str
        """

        self._report_type_id = report_type_id

    @property
    def report_date_range(self):
        """Gets the report_date_range of this OrgReportListResponseOrgReport.  # noqa: E501


        :return: The report_date_range of this OrgReportListResponseOrgReport.  # noqa: E501
        :rtype: str
        """
        return self._report_date_range

    @report_date_range.setter
    def report_date_range(self, report_date_range):
        """Sets the report_date_range of this OrgReportListResponseOrgReport.


        :param report_date_range: The report_date_range of this OrgReportListResponseOrgReport.  # noqa: E501
        :type: str
        """

        self._report_date_range = report_date_range

    @property
    def custom_start_date(self):
        """Gets the custom_start_date of this OrgReportListResponseOrgReport.  # noqa: E501


        :return: The custom_start_date of this OrgReportListResponseOrgReport.  # noqa: E501
        :rtype: datetime
        """
        return self._custom_start_date

    @custom_start_date.setter
    def custom_start_date(self, custom_start_date):
        """Sets the custom_start_date of this OrgReportListResponseOrgReport.


        :param custom_start_date: The custom_start_date of this OrgReportListResponseOrgReport.  # noqa: E501
        :type: datetime
        """

        self._custom_start_date = custom_start_date

    @property
    def custom_end_date(self):
        """Gets the custom_end_date of this OrgReportListResponseOrgReport.  # noqa: E501


        :return: The custom_end_date of this OrgReportListResponseOrgReport.  # noqa: E501
        :rtype: datetime
        """
        return self._custom_end_date

    @custom_end_date.setter
    def custom_end_date(self, custom_end_date):
        """Sets the custom_end_date of this OrgReportListResponseOrgReport.


        :param custom_end_date: The custom_end_date of this OrgReportListResponseOrgReport.  # noqa: E501
        :type: datetime
        """

        self._custom_end_date = custom_end_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrgReportListResponseOrgReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgReportListResponseOrgReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
