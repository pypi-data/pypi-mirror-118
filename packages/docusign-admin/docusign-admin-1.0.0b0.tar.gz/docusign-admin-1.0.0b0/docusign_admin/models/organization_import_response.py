# coding: utf-8

"""
    DocuSign Admin API

    An API for an organization administrator to manage organizations, accounts and users  # noqa: E501

    OpenAPI spec version: v2
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrganizationImportResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'requestor': 'OrganizationImportResponseRequestor',
        'created': 'datetime',
        'last_modified': 'datetime',
        'status': 'str',
        'user_count': 'int',
        'processed_user_count': 'int',
        'added_user_count': 'int',
        'updated_user_count': 'int',
        'closed_user_count': 'int',
        'no_action_required_user_count': 'int',
        'error_count': 'int',
        'warning_count': 'int',
        'invalid_column_headers': 'str',
        'imports_not_found_or_not_available_for_accounts': 'str',
        'imports_failed_for_accounts': 'str',
        'imports_timed_out_for_accounts': 'str',
        'imports_not_found_or_not_available_for_sites': 'str',
        'imports_failed_for_sites': 'str',
        'imports_timed_out_for_sites': 'str',
        'file_level_error_rollups': 'list[OrganizationImportResponseErrorRollup]',
        'user_level_error_rollups': 'list[OrganizationImportResponseErrorRollup]',
        'user_level_warning_rollups': 'list[OrganizationImportResponseWarningRollup]',
        'has_csv_results': 'bool',
        'results_uri': 'str'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'requestor': 'requestor',
        'created': 'created',
        'last_modified': 'last_modified',
        'status': 'status',
        'user_count': 'user_count',
        'processed_user_count': 'processed_user_count',
        'added_user_count': 'added_user_count',
        'updated_user_count': 'updated_user_count',
        'closed_user_count': 'closed_user_count',
        'no_action_required_user_count': 'no_action_required_user_count',
        'error_count': 'error_count',
        'warning_count': 'warning_count',
        'invalid_column_headers': 'invalid_column_headers',
        'imports_not_found_or_not_available_for_accounts': 'imports_not_found_or_not_available_for_accounts',
        'imports_failed_for_accounts': 'imports_failed_for_accounts',
        'imports_timed_out_for_accounts': 'imports_timed_out_for_accounts',
        'imports_not_found_or_not_available_for_sites': 'imports_not_found_or_not_available_for_sites',
        'imports_failed_for_sites': 'imports_failed_for_sites',
        'imports_timed_out_for_sites': 'imports_timed_out_for_sites',
        'file_level_error_rollups': 'file_level_error_rollups',
        'user_level_error_rollups': 'user_level_error_rollups',
        'user_level_warning_rollups': 'user_level_warning_rollups',
        'has_csv_results': 'has_csv_results',
        'results_uri': 'results_uri'
    }

    def __init__(self, id=None, type=None, requestor=None, created=None, last_modified=None, status=None, user_count=None, processed_user_count=None, added_user_count=None, updated_user_count=None, closed_user_count=None, no_action_required_user_count=None, error_count=None, warning_count=None, invalid_column_headers=None, imports_not_found_or_not_available_for_accounts=None, imports_failed_for_accounts=None, imports_timed_out_for_accounts=None, imports_not_found_or_not_available_for_sites=None, imports_failed_for_sites=None, imports_timed_out_for_sites=None, file_level_error_rollups=None, user_level_error_rollups=None, user_level_warning_rollups=None, has_csv_results=None, results_uri=None):  # noqa: E501
        """OrganizationImportResponse - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._type = None
        self._requestor = None
        self._created = None
        self._last_modified = None
        self._status = None
        self._user_count = None
        self._processed_user_count = None
        self._added_user_count = None
        self._updated_user_count = None
        self._closed_user_count = None
        self._no_action_required_user_count = None
        self._error_count = None
        self._warning_count = None
        self._invalid_column_headers = None
        self._imports_not_found_or_not_available_for_accounts = None
        self._imports_failed_for_accounts = None
        self._imports_timed_out_for_accounts = None
        self._imports_not_found_or_not_available_for_sites = None
        self._imports_failed_for_sites = None
        self._imports_timed_out_for_sites = None
        self._file_level_error_rollups = None
        self._user_level_error_rollups = None
        self._user_level_warning_rollups = None
        self._has_csv_results = None
        self._results_uri = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if requestor is not None:
            self.requestor = requestor
        if created is not None:
            self.created = created
        if last_modified is not None:
            self.last_modified = last_modified
        if status is not None:
            self.status = status
        if user_count is not None:
            self.user_count = user_count
        if processed_user_count is not None:
            self.processed_user_count = processed_user_count
        if added_user_count is not None:
            self.added_user_count = added_user_count
        if updated_user_count is not None:
            self.updated_user_count = updated_user_count
        if closed_user_count is not None:
            self.closed_user_count = closed_user_count
        if no_action_required_user_count is not None:
            self.no_action_required_user_count = no_action_required_user_count
        if error_count is not None:
            self.error_count = error_count
        if warning_count is not None:
            self.warning_count = warning_count
        if invalid_column_headers is not None:
            self.invalid_column_headers = invalid_column_headers
        if imports_not_found_or_not_available_for_accounts is not None:
            self.imports_not_found_or_not_available_for_accounts = imports_not_found_or_not_available_for_accounts
        if imports_failed_for_accounts is not None:
            self.imports_failed_for_accounts = imports_failed_for_accounts
        if imports_timed_out_for_accounts is not None:
            self.imports_timed_out_for_accounts = imports_timed_out_for_accounts
        if imports_not_found_or_not_available_for_sites is not None:
            self.imports_not_found_or_not_available_for_sites = imports_not_found_or_not_available_for_sites
        if imports_failed_for_sites is not None:
            self.imports_failed_for_sites = imports_failed_for_sites
        if imports_timed_out_for_sites is not None:
            self.imports_timed_out_for_sites = imports_timed_out_for_sites
        if file_level_error_rollups is not None:
            self.file_level_error_rollups = file_level_error_rollups
        if user_level_error_rollups is not None:
            self.user_level_error_rollups = user_level_error_rollups
        if user_level_warning_rollups is not None:
            self.user_level_warning_rollups = user_level_warning_rollups
        if has_csv_results is not None:
            self.has_csv_results = has_csv_results
        if results_uri is not None:
            self.results_uri = results_uri

    @property
    def id(self):
        """Gets the id of this OrganizationImportResponse.  # noqa: E501


        :return: The id of this OrganizationImportResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrganizationImportResponse.


        :param id: The id of this OrganizationImportResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this OrganizationImportResponse.  # noqa: E501


        :return: The type of this OrganizationImportResponse.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrganizationImportResponse.


        :param type: The type of this OrganizationImportResponse.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def requestor(self):
        """Gets the requestor of this OrganizationImportResponse.  # noqa: E501


        :return: The requestor of this OrganizationImportResponse.  # noqa: E501
        :rtype: OrganizationImportResponseRequestor
        """
        return self._requestor

    @requestor.setter
    def requestor(self, requestor):
        """Sets the requestor of this OrganizationImportResponse.


        :param requestor: The requestor of this OrganizationImportResponse.  # noqa: E501
        :type: OrganizationImportResponseRequestor
        """

        self._requestor = requestor

    @property
    def created(self):
        """Gets the created of this OrganizationImportResponse.  # noqa: E501


        :return: The created of this OrganizationImportResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this OrganizationImportResponse.


        :param created: The created of this OrganizationImportResponse.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def last_modified(self):
        """Gets the last_modified of this OrganizationImportResponse.  # noqa: E501


        :return: The last_modified of this OrganizationImportResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this OrganizationImportResponse.


        :param last_modified: The last_modified of this OrganizationImportResponse.  # noqa: E501
        :type: datetime
        """

        self._last_modified = last_modified

    @property
    def status(self):
        """Gets the status of this OrganizationImportResponse.  # noqa: E501


        :return: The status of this OrganizationImportResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrganizationImportResponse.


        :param status: The status of this OrganizationImportResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def user_count(self):
        """Gets the user_count of this OrganizationImportResponse.  # noqa: E501


        :return: The user_count of this OrganizationImportResponse.  # noqa: E501
        :rtype: int
        """
        return self._user_count

    @user_count.setter
    def user_count(self, user_count):
        """Sets the user_count of this OrganizationImportResponse.


        :param user_count: The user_count of this OrganizationImportResponse.  # noqa: E501
        :type: int
        """

        self._user_count = user_count

    @property
    def processed_user_count(self):
        """Gets the processed_user_count of this OrganizationImportResponse.  # noqa: E501


        :return: The processed_user_count of this OrganizationImportResponse.  # noqa: E501
        :rtype: int
        """
        return self._processed_user_count

    @processed_user_count.setter
    def processed_user_count(self, processed_user_count):
        """Sets the processed_user_count of this OrganizationImportResponse.


        :param processed_user_count: The processed_user_count of this OrganizationImportResponse.  # noqa: E501
        :type: int
        """

        self._processed_user_count = processed_user_count

    @property
    def added_user_count(self):
        """Gets the added_user_count of this OrganizationImportResponse.  # noqa: E501


        :return: The added_user_count of this OrganizationImportResponse.  # noqa: E501
        :rtype: int
        """
        return self._added_user_count

    @added_user_count.setter
    def added_user_count(self, added_user_count):
        """Sets the added_user_count of this OrganizationImportResponse.


        :param added_user_count: The added_user_count of this OrganizationImportResponse.  # noqa: E501
        :type: int
        """

        self._added_user_count = added_user_count

    @property
    def updated_user_count(self):
        """Gets the updated_user_count of this OrganizationImportResponse.  # noqa: E501


        :return: The updated_user_count of this OrganizationImportResponse.  # noqa: E501
        :rtype: int
        """
        return self._updated_user_count

    @updated_user_count.setter
    def updated_user_count(self, updated_user_count):
        """Sets the updated_user_count of this OrganizationImportResponse.


        :param updated_user_count: The updated_user_count of this OrganizationImportResponse.  # noqa: E501
        :type: int
        """

        self._updated_user_count = updated_user_count

    @property
    def closed_user_count(self):
        """Gets the closed_user_count of this OrganizationImportResponse.  # noqa: E501


        :return: The closed_user_count of this OrganizationImportResponse.  # noqa: E501
        :rtype: int
        """
        return self._closed_user_count

    @closed_user_count.setter
    def closed_user_count(self, closed_user_count):
        """Sets the closed_user_count of this OrganizationImportResponse.


        :param closed_user_count: The closed_user_count of this OrganizationImportResponse.  # noqa: E501
        :type: int
        """

        self._closed_user_count = closed_user_count

    @property
    def no_action_required_user_count(self):
        """Gets the no_action_required_user_count of this OrganizationImportResponse.  # noqa: E501


        :return: The no_action_required_user_count of this OrganizationImportResponse.  # noqa: E501
        :rtype: int
        """
        return self._no_action_required_user_count

    @no_action_required_user_count.setter
    def no_action_required_user_count(self, no_action_required_user_count):
        """Sets the no_action_required_user_count of this OrganizationImportResponse.


        :param no_action_required_user_count: The no_action_required_user_count of this OrganizationImportResponse.  # noqa: E501
        :type: int
        """

        self._no_action_required_user_count = no_action_required_user_count

    @property
    def error_count(self):
        """Gets the error_count of this OrganizationImportResponse.  # noqa: E501


        :return: The error_count of this OrganizationImportResponse.  # noqa: E501
        :rtype: int
        """
        return self._error_count

    @error_count.setter
    def error_count(self, error_count):
        """Sets the error_count of this OrganizationImportResponse.


        :param error_count: The error_count of this OrganizationImportResponse.  # noqa: E501
        :type: int
        """

        self._error_count = error_count

    @property
    def warning_count(self):
        """Gets the warning_count of this OrganizationImportResponse.  # noqa: E501


        :return: The warning_count of this OrganizationImportResponse.  # noqa: E501
        :rtype: int
        """
        return self._warning_count

    @warning_count.setter
    def warning_count(self, warning_count):
        """Sets the warning_count of this OrganizationImportResponse.


        :param warning_count: The warning_count of this OrganizationImportResponse.  # noqa: E501
        :type: int
        """

        self._warning_count = warning_count

    @property
    def invalid_column_headers(self):
        """Gets the invalid_column_headers of this OrganizationImportResponse.  # noqa: E501


        :return: The invalid_column_headers of this OrganizationImportResponse.  # noqa: E501
        :rtype: str
        """
        return self._invalid_column_headers

    @invalid_column_headers.setter
    def invalid_column_headers(self, invalid_column_headers):
        """Sets the invalid_column_headers of this OrganizationImportResponse.


        :param invalid_column_headers: The invalid_column_headers of this OrganizationImportResponse.  # noqa: E501
        :type: str
        """

        self._invalid_column_headers = invalid_column_headers

    @property
    def imports_not_found_or_not_available_for_accounts(self):
        """Gets the imports_not_found_or_not_available_for_accounts of this OrganizationImportResponse.  # noqa: E501


        :return: The imports_not_found_or_not_available_for_accounts of this OrganizationImportResponse.  # noqa: E501
        :rtype: str
        """
        return self._imports_not_found_or_not_available_for_accounts

    @imports_not_found_or_not_available_for_accounts.setter
    def imports_not_found_or_not_available_for_accounts(self, imports_not_found_or_not_available_for_accounts):
        """Sets the imports_not_found_or_not_available_for_accounts of this OrganizationImportResponse.


        :param imports_not_found_or_not_available_for_accounts: The imports_not_found_or_not_available_for_accounts of this OrganizationImportResponse.  # noqa: E501
        :type: str
        """

        self._imports_not_found_or_not_available_for_accounts = imports_not_found_or_not_available_for_accounts

    @property
    def imports_failed_for_accounts(self):
        """Gets the imports_failed_for_accounts of this OrganizationImportResponse.  # noqa: E501


        :return: The imports_failed_for_accounts of this OrganizationImportResponse.  # noqa: E501
        :rtype: str
        """
        return self._imports_failed_for_accounts

    @imports_failed_for_accounts.setter
    def imports_failed_for_accounts(self, imports_failed_for_accounts):
        """Sets the imports_failed_for_accounts of this OrganizationImportResponse.


        :param imports_failed_for_accounts: The imports_failed_for_accounts of this OrganizationImportResponse.  # noqa: E501
        :type: str
        """

        self._imports_failed_for_accounts = imports_failed_for_accounts

    @property
    def imports_timed_out_for_accounts(self):
        """Gets the imports_timed_out_for_accounts of this OrganizationImportResponse.  # noqa: E501


        :return: The imports_timed_out_for_accounts of this OrganizationImportResponse.  # noqa: E501
        :rtype: str
        """
        return self._imports_timed_out_for_accounts

    @imports_timed_out_for_accounts.setter
    def imports_timed_out_for_accounts(self, imports_timed_out_for_accounts):
        """Sets the imports_timed_out_for_accounts of this OrganizationImportResponse.


        :param imports_timed_out_for_accounts: The imports_timed_out_for_accounts of this OrganizationImportResponse.  # noqa: E501
        :type: str
        """

        self._imports_timed_out_for_accounts = imports_timed_out_for_accounts

    @property
    def imports_not_found_or_not_available_for_sites(self):
        """Gets the imports_not_found_or_not_available_for_sites of this OrganizationImportResponse.  # noqa: E501


        :return: The imports_not_found_or_not_available_for_sites of this OrganizationImportResponse.  # noqa: E501
        :rtype: str
        """
        return self._imports_not_found_or_not_available_for_sites

    @imports_not_found_or_not_available_for_sites.setter
    def imports_not_found_or_not_available_for_sites(self, imports_not_found_or_not_available_for_sites):
        """Sets the imports_not_found_or_not_available_for_sites of this OrganizationImportResponse.


        :param imports_not_found_or_not_available_for_sites: The imports_not_found_or_not_available_for_sites of this OrganizationImportResponse.  # noqa: E501
        :type: str
        """

        self._imports_not_found_or_not_available_for_sites = imports_not_found_or_not_available_for_sites

    @property
    def imports_failed_for_sites(self):
        """Gets the imports_failed_for_sites of this OrganizationImportResponse.  # noqa: E501


        :return: The imports_failed_for_sites of this OrganizationImportResponse.  # noqa: E501
        :rtype: str
        """
        return self._imports_failed_for_sites

    @imports_failed_for_sites.setter
    def imports_failed_for_sites(self, imports_failed_for_sites):
        """Sets the imports_failed_for_sites of this OrganizationImportResponse.


        :param imports_failed_for_sites: The imports_failed_for_sites of this OrganizationImportResponse.  # noqa: E501
        :type: str
        """

        self._imports_failed_for_sites = imports_failed_for_sites

    @property
    def imports_timed_out_for_sites(self):
        """Gets the imports_timed_out_for_sites of this OrganizationImportResponse.  # noqa: E501


        :return: The imports_timed_out_for_sites of this OrganizationImportResponse.  # noqa: E501
        :rtype: str
        """
        return self._imports_timed_out_for_sites

    @imports_timed_out_for_sites.setter
    def imports_timed_out_for_sites(self, imports_timed_out_for_sites):
        """Sets the imports_timed_out_for_sites of this OrganizationImportResponse.


        :param imports_timed_out_for_sites: The imports_timed_out_for_sites of this OrganizationImportResponse.  # noqa: E501
        :type: str
        """

        self._imports_timed_out_for_sites = imports_timed_out_for_sites

    @property
    def file_level_error_rollups(self):
        """Gets the file_level_error_rollups of this OrganizationImportResponse.  # noqa: E501


        :return: The file_level_error_rollups of this OrganizationImportResponse.  # noqa: E501
        :rtype: list[OrganizationImportResponseErrorRollup]
        """
        return self._file_level_error_rollups

    @file_level_error_rollups.setter
    def file_level_error_rollups(self, file_level_error_rollups):
        """Sets the file_level_error_rollups of this OrganizationImportResponse.


        :param file_level_error_rollups: The file_level_error_rollups of this OrganizationImportResponse.  # noqa: E501
        :type: list[OrganizationImportResponseErrorRollup]
        """

        self._file_level_error_rollups = file_level_error_rollups

    @property
    def user_level_error_rollups(self):
        """Gets the user_level_error_rollups of this OrganizationImportResponse.  # noqa: E501


        :return: The user_level_error_rollups of this OrganizationImportResponse.  # noqa: E501
        :rtype: list[OrganizationImportResponseErrorRollup]
        """
        return self._user_level_error_rollups

    @user_level_error_rollups.setter
    def user_level_error_rollups(self, user_level_error_rollups):
        """Sets the user_level_error_rollups of this OrganizationImportResponse.


        :param user_level_error_rollups: The user_level_error_rollups of this OrganizationImportResponse.  # noqa: E501
        :type: list[OrganizationImportResponseErrorRollup]
        """

        self._user_level_error_rollups = user_level_error_rollups

    @property
    def user_level_warning_rollups(self):
        """Gets the user_level_warning_rollups of this OrganizationImportResponse.  # noqa: E501


        :return: The user_level_warning_rollups of this OrganizationImportResponse.  # noqa: E501
        :rtype: list[OrganizationImportResponseWarningRollup]
        """
        return self._user_level_warning_rollups

    @user_level_warning_rollups.setter
    def user_level_warning_rollups(self, user_level_warning_rollups):
        """Sets the user_level_warning_rollups of this OrganizationImportResponse.


        :param user_level_warning_rollups: The user_level_warning_rollups of this OrganizationImportResponse.  # noqa: E501
        :type: list[OrganizationImportResponseWarningRollup]
        """

        self._user_level_warning_rollups = user_level_warning_rollups

    @property
    def has_csv_results(self):
        """Gets the has_csv_results of this OrganizationImportResponse.  # noqa: E501


        :return: The has_csv_results of this OrganizationImportResponse.  # noqa: E501
        :rtype: bool
        """
        return self._has_csv_results

    @has_csv_results.setter
    def has_csv_results(self, has_csv_results):
        """Sets the has_csv_results of this OrganizationImportResponse.


        :param has_csv_results: The has_csv_results of this OrganizationImportResponse.  # noqa: E501
        :type: bool
        """

        self._has_csv_results = has_csv_results

    @property
    def results_uri(self):
        """Gets the results_uri of this OrganizationImportResponse.  # noqa: E501


        :return: The results_uri of this OrganizationImportResponse.  # noqa: E501
        :rtype: str
        """
        return self._results_uri

    @results_uri.setter
    def results_uri(self, results_uri):
        """Sets the results_uri of this OrganizationImportResponse.


        :param results_uri: The results_uri of this OrganizationImportResponse.  # noqa: E501
        :type: str
        """

        self._results_uri = results_uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrganizationImportResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationImportResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
