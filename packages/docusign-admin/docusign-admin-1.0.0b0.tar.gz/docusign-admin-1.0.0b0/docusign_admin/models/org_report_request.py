# coding: utf-8

"""
    DocuSign Admin API

    An API for an organization administrator to manage organizations, accounts and users  # noqa: E501

    OpenAPI spec version: v2
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrgReportRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'report_type': 'str',
        'report_date_range': 'str',
        'account_ids': 'list[str]',
        'custom_start_date': 'datetime',
        'custom_end_date': 'datetime'
    }

    attribute_map = {
        'report_type': 'report_type',
        'report_date_range': 'report_date_range',
        'account_ids': 'account_ids',
        'custom_start_date': 'custom_start_date',
        'custom_end_date': 'custom_end_date'
    }

    def __init__(self, report_type=None, report_date_range=None, account_ids=None, custom_start_date=None, custom_end_date=None):  # noqa: E501
        """OrgReportRequest - a model defined in Swagger"""  # noqa: E501

        self._report_type = None
        self._report_date_range = None
        self._account_ids = None
        self._custom_start_date = None
        self._custom_end_date = None
        self.discriminator = None

        if report_type is not None:
            self.report_type = report_type
        if report_date_range is not None:
            self.report_date_range = report_date_range
        if account_ids is not None:
            self.account_ids = account_ids
        if custom_start_date is not None:
            self.custom_start_date = custom_start_date
        if custom_end_date is not None:
            self.custom_end_date = custom_end_date

    @property
    def report_type(self):
        """Gets the report_type of this OrgReportRequest.  # noqa: E501


        :return: The report_type of this OrgReportRequest.  # noqa: E501
        :rtype: str
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type):
        """Sets the report_type of this OrgReportRequest.


        :param report_type: The report_type of this OrgReportRequest.  # noqa: E501
        :type: str
        """

        self._report_type = report_type

    @property
    def report_date_range(self):
        """Gets the report_date_range of this OrgReportRequest.  # noqa: E501


        :return: The report_date_range of this OrgReportRequest.  # noqa: E501
        :rtype: str
        """
        return self._report_date_range

    @report_date_range.setter
    def report_date_range(self, report_date_range):
        """Sets the report_date_range of this OrgReportRequest.


        :param report_date_range: The report_date_range of this OrgReportRequest.  # noqa: E501
        :type: str
        """

        self._report_date_range = report_date_range

    @property
    def account_ids(self):
        """Gets the account_ids of this OrgReportRequest.  # noqa: E501


        :return: The account_ids of this OrgReportRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._account_ids

    @account_ids.setter
    def account_ids(self, account_ids):
        """Sets the account_ids of this OrgReportRequest.


        :param account_ids: The account_ids of this OrgReportRequest.  # noqa: E501
        :type: list[str]
        """

        self._account_ids = account_ids

    @property
    def custom_start_date(self):
        """Gets the custom_start_date of this OrgReportRequest.  # noqa: E501


        :return: The custom_start_date of this OrgReportRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._custom_start_date

    @custom_start_date.setter
    def custom_start_date(self, custom_start_date):
        """Sets the custom_start_date of this OrgReportRequest.


        :param custom_start_date: The custom_start_date of this OrgReportRequest.  # noqa: E501
        :type: datetime
        """

        self._custom_start_date = custom_start_date

    @property
    def custom_end_date(self):
        """Gets the custom_end_date of this OrgReportRequest.  # noqa: E501


        :return: The custom_end_date of this OrgReportRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._custom_end_date

    @custom_end_date.setter
    def custom_end_date(self, custom_end_date):
        """Sets the custom_end_date of this OrgReportRequest.


        :param custom_end_date: The custom_end_date of this OrgReportRequest.  # noqa: E501
        :type: datetime
        """

        self._custom_end_date = custom_end_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrgReportRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgReportRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
