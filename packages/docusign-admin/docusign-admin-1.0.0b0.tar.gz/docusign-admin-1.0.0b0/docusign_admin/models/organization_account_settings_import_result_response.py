# coding: utf-8

"""
    DocuSign Admin API

    An API for an organization administrator to manage organizations, accounts and users  # noqa: E501

    OpenAPI spec version: v2
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrganizationAccountSettingsImportResultResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'site_id': 'int',
        'url': 'str',
        'number_processed_accounts': 'int',
        'error_details': 'OASIRRErrorDetails',
        'processing_issues_by_account': 'list[OASIRROrganizationAccountSettingsErrorDataResponse]',
        'number_unprocessed_accounts': 'int'
    }

    attribute_map = {
        'id': 'id',
        'site_id': 'site_id',
        'url': 'url',
        'number_processed_accounts': 'number_processed_accounts',
        'error_details': 'error_details',
        'processing_issues_by_account': 'processing_issues_by_account',
        'number_unprocessed_accounts': 'number_unprocessed_accounts'
    }

    def __init__(self, id=None, site_id=None, url=None, number_processed_accounts=None, error_details=None, processing_issues_by_account=None, number_unprocessed_accounts=None):  # noqa: E501
        """OrganizationAccountSettingsImportResultResponse - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._site_id = None
        self._url = None
        self._number_processed_accounts = None
        self._error_details = None
        self._processing_issues_by_account = None
        self._number_unprocessed_accounts = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if site_id is not None:
            self.site_id = site_id
        if url is not None:
            self.url = url
        if number_processed_accounts is not None:
            self.number_processed_accounts = number_processed_accounts
        if error_details is not None:
            self.error_details = error_details
        if processing_issues_by_account is not None:
            self.processing_issues_by_account = processing_issues_by_account
        if number_unprocessed_accounts is not None:
            self.number_unprocessed_accounts = number_unprocessed_accounts

    @property
    def id(self):
        """Gets the id of this OrganizationAccountSettingsImportResultResponse.  # noqa: E501


        :return: The id of this OrganizationAccountSettingsImportResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrganizationAccountSettingsImportResultResponse.


        :param id: The id of this OrganizationAccountSettingsImportResultResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def site_id(self):
        """Gets the site_id of this OrganizationAccountSettingsImportResultResponse.  # noqa: E501


        :return: The site_id of this OrganizationAccountSettingsImportResultResponse.  # noqa: E501
        :rtype: int
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this OrganizationAccountSettingsImportResultResponse.


        :param site_id: The site_id of this OrganizationAccountSettingsImportResultResponse.  # noqa: E501
        :type: int
        """

        self._site_id = site_id

    @property
    def url(self):
        """Gets the url of this OrganizationAccountSettingsImportResultResponse.  # noqa: E501


        :return: The url of this OrganizationAccountSettingsImportResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this OrganizationAccountSettingsImportResultResponse.


        :param url: The url of this OrganizationAccountSettingsImportResultResponse.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def number_processed_accounts(self):
        """Gets the number_processed_accounts of this OrganizationAccountSettingsImportResultResponse.  # noqa: E501


        :return: The number_processed_accounts of this OrganizationAccountSettingsImportResultResponse.  # noqa: E501
        :rtype: int
        """
        return self._number_processed_accounts

    @number_processed_accounts.setter
    def number_processed_accounts(self, number_processed_accounts):
        """Sets the number_processed_accounts of this OrganizationAccountSettingsImportResultResponse.


        :param number_processed_accounts: The number_processed_accounts of this OrganizationAccountSettingsImportResultResponse.  # noqa: E501
        :type: int
        """

        self._number_processed_accounts = number_processed_accounts

    @property
    def error_details(self):
        """Gets the error_details of this OrganizationAccountSettingsImportResultResponse.  # noqa: E501


        :return: The error_details of this OrganizationAccountSettingsImportResultResponse.  # noqa: E501
        :rtype: OASIRRErrorDetails
        """
        return self._error_details

    @error_details.setter
    def error_details(self, error_details):
        """Sets the error_details of this OrganizationAccountSettingsImportResultResponse.


        :param error_details: The error_details of this OrganizationAccountSettingsImportResultResponse.  # noqa: E501
        :type: OASIRRErrorDetails
        """

        self._error_details = error_details

    @property
    def processing_issues_by_account(self):
        """Gets the processing_issues_by_account of this OrganizationAccountSettingsImportResultResponse.  # noqa: E501


        :return: The processing_issues_by_account of this OrganizationAccountSettingsImportResultResponse.  # noqa: E501
        :rtype: list[OASIRROrganizationAccountSettingsErrorDataResponse]
        """
        return self._processing_issues_by_account

    @processing_issues_by_account.setter
    def processing_issues_by_account(self, processing_issues_by_account):
        """Sets the processing_issues_by_account of this OrganizationAccountSettingsImportResultResponse.


        :param processing_issues_by_account: The processing_issues_by_account of this OrganizationAccountSettingsImportResultResponse.  # noqa: E501
        :type: list[OASIRROrganizationAccountSettingsErrorDataResponse]
        """

        self._processing_issues_by_account = processing_issues_by_account

    @property
    def number_unprocessed_accounts(self):
        """Gets the number_unprocessed_accounts of this OrganizationAccountSettingsImportResultResponse.  # noqa: E501


        :return: The number_unprocessed_accounts of this OrganizationAccountSettingsImportResultResponse.  # noqa: E501
        :rtype: int
        """
        return self._number_unprocessed_accounts

    @number_unprocessed_accounts.setter
    def number_unprocessed_accounts(self, number_unprocessed_accounts):
        """Sets the number_unprocessed_accounts of this OrganizationAccountSettingsImportResultResponse.


        :param number_unprocessed_accounts: The number_unprocessed_accounts of this OrganizationAccountSettingsImportResultResponse.  # noqa: E501
        :type: int
        """

        self._number_unprocessed_accounts = number_unprocessed_accounts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrganizationAccountSettingsImportResultResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationAccountSettingsImportResultResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
