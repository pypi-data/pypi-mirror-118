##########################################################################
#
# config.ini.example
#
# This file is a template for your site-specific configuration. Copy it,
# and modify to suit your requirements.
#
# Some values have defaults which are specified in config_default.ini.
# Others *must* be set in your configuration file.
#
##########################################################################

##########################################################################
# LDAP access configuration
##########################################################################

[ldap]

# Debug LDAP connections?
debug = false

# LDAP server connection details (REQUIRED)
server_uri = ldap://ldap.example.com

# User to bind to the directory as. Leave empty for anonymous binding.
bind_username =
bind_password =

# Use TLS? If the URI scheme is ldaps://, this is ignored.
use_starttls = false

# TLS/SSL certificates. Specify if required, otherwise leave empty
ca_cert_file =
cert_file =
key_file =

# Search scope for users (one of BASE, LEVEL or SUBTREE)
search_scope = LEVEL

# The base DN for the user search (REQUIRED)
base_dn = CN=Users,dc=example,dc=com

# Filter string for the user search. For OpenLDAP, '(cn=*)' may well be enough.
# For AD, you might use '(objectClass=user)' (REQUIRED)
filter_string = (objectClass=user)

# The base DN for the admin user search. This may be the same as the base_dn, or
# may point to an alternate OU. If empty, no search will be performed.
admin_base_dn = CN=Users,dc=example,dc=com

# The filter string for users that should be created as superusers regardless of
# the [general]/role_attribute_superuser setting. With AD you might use a filter
# such as: (&(objectClass=user)(memberof=CN=MYGROUP,CN=Users,dc=example,dc=com))
# If, for example on OpenLDAP, your admin users are members of an alternate OU,
# then a filter of (cn=*) may suffice.
# If empty, no search will be performed.
admin_filter_string = (&(objectClass=user)(memberof=CN=MYGROUP,CN=Users,dc=example,dc=com))

# The LDAP attribute containing user names. In OpenLDAP, this may be 'uid'
# whilst in AD, 'sAMAccountName' might be appropriate. (REQUIRED)
username_attribute = uid

# A command delimited list of users to ignore
ignore_users = Manager,ldap.sync


##########################################################################
# Postgres access configuration
##########################################################################

[postgres]

# Postgres server connection string (REQUIRED)
server_connstr = hostaddr=127.0.0.1 port=5432 dbname=postgres user=postgres

# A comma delimited list of login role names to ignore
ignore_login_roles = postgres

##########################################################################
# General configuration
##########################################################################

[general]

# Add LDAP users to Postgres if they don't exist, or ignore them?
add_ldap_users_to_postgres = true

# Remove Postgres login roles if they don't exist in LDAP, or ignore them?
remove_login_roles_from_postgres = true

# Attributes to grant to login roles in Postgres. Note these attributes
# are only applied to roles when created. Existing roles are unaffected.
role_attribute_superuser = false
role_attribute_createdb = false
role_attribute_createrole = false
role_attribute_noinherit = false
role_attribute_bypassrls = false

# Role connection limit attribute. Set to -1 to ignore, or an integer.
# Note this attribute is only applied to roles when created. Existing
# roles are unaffected.
role_attribute_connection_limit = -1

# A comma delimited list of roles to grant membership to when creating
# login roles. Note that existing roles will not be modified. Roles specified
# here must already exist in Postgres.
roles_to_grant = group1,group2

# A comma delimited list of roles to grant membership to with ADMIN when
# creating login roles. Note that existing roles will not be modified. Roles
# specified here must already exist in Postgres.
roles_to_grant_with_admin = group3

# A dictionary of GUCs to set for each user, as "ALTER ROLE foo IN DATABASE bar
# SET blah TO value" would do. The dictionary should look as follows:
# gucs_to_set = {
#     'client_min_messages': ['debug1', ''],
#     'application_name': ['My Cool App', 'postgres']
#     }
# Note that the database field may be left empty to apply to all databases.
# Additionally note that the closing brace must be properly indented!
gucs_to_set = {
    }




