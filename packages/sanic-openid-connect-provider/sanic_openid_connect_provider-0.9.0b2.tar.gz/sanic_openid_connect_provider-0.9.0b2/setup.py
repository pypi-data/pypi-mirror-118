# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['sanic_openid_connect_provider', 'sanic_openid_connect_provider.models']

package_data = \
{'': ['*'], 'sanic_openid_connect_provider': ['templates/*']}

install_requires = \
['PyJWT>=1.6.4', 'aiohttp>=3.4.4', 'jwcrypto>=0.6.0', 'sanic>=20.9.1']

setup_kwargs = {
    'name': 'sanic-openid-connect-provider',
    'version': '0.9.0b2',
    'description': 'OpenID Provider framework for sanic',
    'long_description': 'Sanic OpenID Connect Provider\n=============================\n\n.. image:: https://img.shields.io/pypi/v/sanic_openid_connect_provider.svg\n        :target: https://pypi.python.org/pypi/sanic_openid_connect_provider\n\n.. image:: https://img.shields.io/travis/terrycain/sanic-openid-provider.svg\n        :target: https://travis-ci.com/terrycain/sanic-openid-provider\n\n.. image:: https://pyup.io/repos/github/terrycain/sanic-openid-provider/shield.svg\n     :target: https://pyup.io/repos/github/terrycain/sanic-openid-provider/\n     :alt: Updates\n\nIt\'s a work-in-progress, Alpha stage I would say. If anyone finds this useful / wants to use it, drop an issue I\'d be\nmore than happy to fix it up so its actually helpful to someone other than myself.\n\nLast time I checked it passed around 82 / 93 of the OpenID Connect \nProvider Certification tests that appear when you tick ``webfinger``, ``dynamic info discovery``,\n``dynamic client registration`` and select ``code`` response type.\n\nIt\'s pretty usable for the authorization code flow. Still needs a fair amount of re-architecting and cleaning up but I\'m\ntrying to make it so you can plug it into various backends like DynamoDB/Redis for token/client storage.\n\nDocs and examples will be coming soon.\n\nPreconditions\n-------------\n\nThe package expects ``sanic_jinja2`` and ``sanic_session`` to be in use and configured.\n\nTesting\n-------\n\nAs said above it passes most of the OpenID tests I\'ve ran against it. Below are the ones I haven\'t passed yet\n\nSignature + Encryption\n~~~~~~~~~~~~~~~~~~~~~~\n\nHaven\'t figured out why the userinfo enc/sig doesnt work yet.\n\n* ``OP-IDToken-SigEnc``\n* ``OP-UserInfo-SigEnc``\n* ``OP-request_uri-SigEnc``\n\nClaims\n~~~~~~\n\nHaven\'t got around to this bit yet\n\n* ``OP-claims-acr-essential``\n* ``OP-claims-acr-voluntary``\n* ``OP-claims-acr=1``\n\nPopup\n~~~~~\n\nDoesnt display in a popup box\n\n* ``OP-display-popup``\n\nMisc Request Parameters\n~~~~~~~~~~~~~~~~~~~~~~~\n\nHaven\'t dealt with this yet.\n\n* ``OP-Req-acr_values``\n\nKey Rotation\n~~~~~~~~~~~~\n\nNeed some methods to rotate keys\n\n* ``OP-Rotation-OP-Enc``\n* ``OP-Rotation-OP-Sig``\n* ``OP-Rotation-RP-Enc``\n* ``OP-Rotation-RP-Sig``\n\n\nKey creation\n------------\n\nRSA Key\n~~~~~~~\n\n.. code:: bash\n\n    openssl genrsa -nodes -out rsa.pem 4096\n\n\nECDSA Key\n~~~~~~~~~\n\n.. code:: bash\n\n    openssl ecparam -name prime256v1 -genkey -noout -out ec.pem\n    openssl ec -in ec.pem -pubout -out ec.pub\n\n\nOpenID Connect Node Example\n---------------------------\n\napp.js\n~~~~~~\n\n.. code:: javascript\n\n    /*\n    *\n    * Note: This example is a "full" example that registers a new client with the OIDC server each time. This returns a client ID and secret. \n    *       In reality, you should only register once per service and then save the client information for future use.      \n    *       I would advise using this script to register your client and test it - It will console.log the ID and secret which you can then hardcode:\n    *       https://github.com/panva/node-openid-client#manually-recommended\n    *\n    *   In production, I import a modified version of this script with promise support. Make sure it\'s finished discovery before defining your \n    *   error handlers!\n    */\n\n    //******* Config\n    const config = {\n        /* jshint ignore:start */\n        //Server we\'re going to auth with\n        authServer: "https://authserver",\n        //Access token provided by admin for initial registration\n        initialAccessToken: "dcb89d4c-fec4-11e8-8eb2-f2801f1b9fd1",\n        //Listen port\n        port: 3000,\n        //All the settings required to register our client\n        registration: {\n            //IDP prefers ES256 encryption\n            id_token_signed_response_alg: \'ES256\',\n            //Array of all potential redirect URI\'s\n            redirect_uris: ["http://127.0.0.1:3000/callback", "http://127.0.0.1/callback"],\n            //String space-delimited list of all potentially required scopes\n            scope: "openid email profile",\n            grant_types: [\'authorization_code\'],\n            application_type: \'web\',\n            //Name of client - For reference only\n            client_name: \'Some client\',\n            subject_type: \'public\',\n            response_types: ["code"]\n        },\n        auth: {\n            //uri the IDP redirects to after authentication - Must be in the array above\n            redirect_uri: "http://127.0.0.1:3000/callback",\n            //Scopes we want for authentication\n            scope: "openid email profile",\n            id_token_signed_response_alg: \'ES256\'\n        }\n        /* jshint ignore:end */\n    }\n\n    //******* End Config\n\n\n    const { Issuer } = require(\'openid-client\');\n    const { Strategy } = require(\'openid-client\');\n    const session = require(\'express-session\');\n    const express = require(\'express\');\n    const app = express();\n    const passport = require(\'passport\');\n\n    // Set up Express sessions in memory - Please don\'t do this in production, use something to store your sessions\n    // so we can load balance. \n    app.use(session({\n        secret: \'asupersecretpassword\',\n        resave: true,\n        saveUninitialized: true\n    }));\n    //Make sure to initialise before we start discovery\n    app.use(passport.initialize());\n    app.use(passport.session());\n\n    //Discover settings from OID server\n    Issuer.discover(config.authServer)\n        .then(customIssuer => {\n\n            const opts = { initialAccessToken: config.initialAccessToken };\n            const metadata = config.registration;\n\n            // You only need to do client registration once (ever) - You should do it during development and then hardcode the client id and secret\n            // Below is an example of a hardcoded client, rather than a client that registers each time\n            // See more in the docs: https://github.com/panva/node-openid-client#manually-recommended\n            \n                // const client = new customIssuer.Client({\n                //         client_id: \'83fc3323d3c045a4\',\n                //         client_secret: \'7f9b5e1721a244c989d011839595b766\',\n                //         id_token_signed_response_alg: \'ES256\'\n                //     });\n            \n             customIssuer.Client.register(metadata, opts)\n               .then(client => {\n                console.log("!!!!! Save this information for re-use later! !!!!!")\n                console.log("Client ID:     " + client.client_id)\n                console.log("Client Secret: " + client.client_secret)\n                console.log("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")\n                console.log("Metadata:      " + JSON.stringify(client.metadata, null, 2))\n            \n                const params = config.auth;\n                // Setting up our strategy + validation function\n                passport.use(\'oidc\', new Strategy({client, params, passReqToCallback: null, sessionKey: null, usePKCE: false}, (tokenset, userinfo, done) => {\n                    return done(null, userinfo)\n                }));\n                \n                passport.serializeUser((user, done) => {\n                    // This is where you\'d get any extra locally-stored data from the database or something for accessing in req.user\n                    done(null, user);\n                });\n\n                passport.deserializeUser((user, done) => {\n                    done(null, user);\n                });\n\n                // GET /login will start authentication\n                app.get(\'/login\', passport.authenticate(\'oidc\'));\n\n                // GET /callback redirected from IDP with code\n                app.get(\'/callback\', passport.authenticate(\'oidc\', {\n                  successRedirect: \'/\',\n                  failureRedirect: \'/login\'\n                }));\n\n                // Force every other request to check if user is authed, if not then redirect to /login and start auth\n                app.use((req, res, next) => {\n                    if (!req.user) {\n                        res.redirect(\'/login\');\n                    } else {\n                        next();\n                    }\n                })\n\n                // Example authenticated endpoint\n                app.get(\'/\',(req, res) => {\n                    console.log(`User ${req.user.name} has logged in.`);\n                    res.send(req.user);\n                })\n\n\n                app.listen(config.port, () => console.log(`Example app listening on port ${config.port}!`))\n\n            });\n        })\n\n\npackage.json\n~~~~~~~~~~~~\n\n.. code:: json\n\n    {\n      "name": "openidtest",\n      "version": "1.0.0",\n      "description": "",\n      "main": "app.js",\n      "scripts": {\n        "test": "echo \\"Error: no test specified\\" && exit 1"\n      },\n      "author": "",\n      "license": "ISC",\n      "dependencies": {\n        "express": "^4.16.4",\n        "express-session": "^1.15.6",\n        "passport": "^0.4.0",\n        "passport-openid-connect": "^0.1.0"\n      }\n    }\n',
    'author': 'Terry Cain',
    'author_email': 'terry@terrys-home.co.uk',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/terrycain/sanic-openid-provider',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.6.2,<4.0',
}


setup(**setup_kwargs)
