# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from aether_grpc.services import api_service_pb2 as services_dot_api__service__pb2


class APIServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HealthCheck = channel.unary_unary(
                '/aether.services.APIService/HealthCheck',
                request_serializer=services_dot_api__service__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=services_dot_api__service__pb2.HealthCheckResponse.FromString,
                )
        self.StartWorkflowExecution = channel.unary_unary(
                '/aether.services.APIService/StartWorkflowExecution',
                request_serializer=services_dot_api__service__pb2.StartWorkflowExecutionRequest.SerializeToString,
                response_deserializer=services_dot_api__service__pb2.StartWorkflowExecutionResponse.FromString,
                )
        self.PollWorkflowTaskQueue = channel.unary_unary(
                '/aether.services.APIService/PollWorkflowTaskQueue',
                request_serializer=services_dot_api__service__pb2.PollWorkflowTaskQueueRequest.SerializeToString,
                response_deserializer=services_dot_api__service__pb2.PollWorkflowTaskQueueResponse.FromString,
                )


class APIServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def HealthCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartWorkflowExecution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PollWorkflowTaskQueue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_APIServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=services_dot_api__service__pb2.HealthCheckRequest.FromString,
                    response_serializer=services_dot_api__service__pb2.HealthCheckResponse.SerializeToString,
            ),
            'StartWorkflowExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.StartWorkflowExecution,
                    request_deserializer=services_dot_api__service__pb2.StartWorkflowExecutionRequest.FromString,
                    response_serializer=services_dot_api__service__pb2.StartWorkflowExecutionResponse.SerializeToString,
            ),
            'PollWorkflowTaskQueue': grpc.unary_unary_rpc_method_handler(
                    servicer.PollWorkflowTaskQueue,
                    request_deserializer=services_dot_api__service__pb2.PollWorkflowTaskQueueRequest.FromString,
                    response_serializer=services_dot_api__service__pb2.PollWorkflowTaskQueueResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'aether.services.APIService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class APIService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/aether.services.APIService/HealthCheck',
            services_dot_api__service__pb2.HealthCheckRequest.SerializeToString,
            services_dot_api__service__pb2.HealthCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartWorkflowExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/aether.services.APIService/StartWorkflowExecution',
            services_dot_api__service__pb2.StartWorkflowExecutionRequest.SerializeToString,
            services_dot_api__service__pb2.StartWorkflowExecutionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PollWorkflowTaskQueue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/aether.services.APIService/PollWorkflowTaskQueue',
            services_dot_api__service__pb2.PollWorkflowTaskQueueRequest.SerializeToString,
            services_dot_api__service__pb2.PollWorkflowTaskQueueResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
