# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _UltrasoundPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkInverse1DFFTImageFilterPython
else:
    import _itkInverse1DFFTImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkInverse1DFFTImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkInverse1DFFTImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkImageToImageFilterBPython
import itk.itkImageToImageFilterCommonPython
import itk.pyBasePython
import itk.itkImagePython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.stdcomplexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.ITKCommonBasePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkRGBAPixelPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
class listIndex2(collections.abc.MutableSequence):
    r"""Proxy of C++ std::list< itk::Index< 2 > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex2_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex2___nonzero__)
    __bool__ = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex2___bool__)
    __len__ = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex2___len__)
    __getslice__ = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex2___getslice__)
    __setslice__ = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex2___setslice__)
    __delslice__ = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex2___delslice__)
    __delitem__ = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex2___delitem__)
    __getitem__ = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex2___getitem__)
    __setitem__ = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex2___setitem__)
    pop = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex2_pop)
    append = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex2_append)
    empty = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex2_empty)
    size = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex2_size)
    swap = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex2_swap)
    begin = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex2_begin)
    end = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex2_end)
    rbegin = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex2_rbegin)
    rend = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex2_rend)
    clear = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex2_clear)
    get_allocator = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex2_get_allocator)
    pop_back = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex2_pop_back)
    erase = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex2_erase)

    def __init__(self, *args):
        r"""
        __init__(self) -> listIndex2
        __init__(self, other) -> listIndex2

        Parameters
        ----------
        other: std::list< itk::Index< 2 > > const &

        __init__(self, size) -> listIndex2

        Parameters
        ----------
        size: std::list< itk::Index< 2 > >::size_type

        __init__(self, size, value) -> listIndex2

        Parameters
        ----------
        size: std::list< itk::Index< 2 > >::size_type
        value: std::list< itk::Index< 2 > >::value_type const &

        """
        _itkInverse1DFFTImageFilterPython.listIndex2_swiginit(self, _itkInverse1DFFTImageFilterPython.new_listIndex2(*args))
    push_back = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex2_push_back)
    front = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex2_front)
    back = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex2_back)
    assign = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex2_assign)
    resize = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex2_resize)
    insert = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex2_insert)
    pop_front = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex2_pop_front)
    push_front = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex2_push_front)
    reverse = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex2_reverse)
    __swig_destroy__ = _itkInverse1DFFTImageFilterPython.delete_listIndex2

# Register listIndex2 in _itkInverse1DFFTImageFilterPython:
_itkInverse1DFFTImageFilterPython.listIndex2_swigregister(listIndex2)

class listIndex3(collections.abc.MutableSequence):
    r"""Proxy of C++ std::list< itk::Index< 3 > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex3_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex3___nonzero__)
    __bool__ = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex3___bool__)
    __len__ = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex3___len__)
    __getslice__ = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex3___getslice__)
    __setslice__ = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex3___setslice__)
    __delslice__ = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex3___delslice__)
    __delitem__ = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex3___delitem__)
    __getitem__ = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex3___getitem__)
    __setitem__ = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex3___setitem__)
    pop = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex3_pop)
    append = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex3_append)
    empty = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex3_empty)
    size = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex3_size)
    swap = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex3_swap)
    begin = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex3_begin)
    end = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex3_end)
    rbegin = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex3_rbegin)
    rend = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex3_rend)
    clear = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex3_clear)
    get_allocator = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex3_get_allocator)
    pop_back = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex3_pop_back)
    erase = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex3_erase)

    def __init__(self, *args):
        r"""
        __init__(self) -> listIndex3
        __init__(self, other) -> listIndex3

        Parameters
        ----------
        other: std::list< itk::Index< 3 > > const &

        __init__(self, size) -> listIndex3

        Parameters
        ----------
        size: std::list< itk::Index< 3 > >::size_type

        __init__(self, size, value) -> listIndex3

        Parameters
        ----------
        size: std::list< itk::Index< 3 > >::size_type
        value: std::list< itk::Index< 3 > >::value_type const &

        """
        _itkInverse1DFFTImageFilterPython.listIndex3_swiginit(self, _itkInverse1DFFTImageFilterPython.new_listIndex3(*args))
    push_back = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex3_push_back)
    front = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex3_front)
    back = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex3_back)
    assign = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex3_assign)
    resize = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex3_resize)
    insert = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex3_insert)
    pop_front = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex3_pop_front)
    push_front = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex3_push_front)
    reverse = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex3_reverse)
    __swig_destroy__ = _itkInverse1DFFTImageFilterPython.delete_listIndex3

# Register listIndex3 in _itkInverse1DFFTImageFilterPython:
_itkInverse1DFFTImageFilterPython.listIndex3_swigregister(listIndex3)

class listIndex4(collections.abc.MutableSequence):
    r"""Proxy of C++ std::list< itk::Index< 4 > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex4_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex4___nonzero__)
    __bool__ = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex4___bool__)
    __len__ = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex4___len__)
    __getslice__ = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex4___getslice__)
    __setslice__ = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex4___setslice__)
    __delslice__ = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex4___delslice__)
    __delitem__ = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex4___delitem__)
    __getitem__ = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex4___getitem__)
    __setitem__ = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex4___setitem__)
    pop = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex4_pop)
    append = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex4_append)
    empty = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex4_empty)
    size = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex4_size)
    swap = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex4_swap)
    begin = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex4_begin)
    end = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex4_end)
    rbegin = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex4_rbegin)
    rend = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex4_rend)
    clear = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex4_clear)
    get_allocator = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex4_get_allocator)
    pop_back = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex4_pop_back)
    erase = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex4_erase)

    def __init__(self, *args):
        r"""
        __init__(self) -> listIndex4
        __init__(self, other) -> listIndex4

        Parameters
        ----------
        other: std::list< itk::Index< 4 > > const &

        __init__(self, size) -> listIndex4

        Parameters
        ----------
        size: std::list< itk::Index< 4 > >::size_type

        __init__(self, size, value) -> listIndex4

        Parameters
        ----------
        size: std::list< itk::Index< 4 > >::size_type
        value: std::list< itk::Index< 4 > >::value_type const &

        """
        _itkInverse1DFFTImageFilterPython.listIndex4_swiginit(self, _itkInverse1DFFTImageFilterPython.new_listIndex4(*args))
    push_back = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex4_push_back)
    front = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex4_front)
    back = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex4_back)
    assign = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex4_assign)
    resize = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex4_resize)
    insert = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex4_insert)
    pop_front = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex4_pop_front)
    push_front = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex4_push_front)
    reverse = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.listIndex4_reverse)
    __swig_destroy__ = _itkInverse1DFFTImageFilterPython.delete_listIndex4

# Register listIndex4 in _itkInverse1DFFTImageFilterPython:
_itkInverse1DFFTImageFilterPython.listIndex4_swigregister(listIndex4)


def itkInverse1DFFTImageFilterICD2_New():
    return itkInverse1DFFTImageFilterICD2.New()

class itkInverse1DFFTImageFilterICD2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD2ID2):
    r"""Proxy of C++ itkInverse1DFFTImageFilterICD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD2___New_orig__)
    GetDirection = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD2_GetDirection)
    SetDirection = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD2_SetDirection)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD2_GetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkInverse1DFFTImageFilterPython.delete_itkInverse1DFFTImageFilterICD2
    cast = _swig_new_static_method(_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD2_cast)

    def New(*args, **kargs):
        """New() -> itkInverse1DFFTImageFilterICD2

        Create a new object of the class itkInverse1DFFTImageFilterICD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInverse1DFFTImageFilterICD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInverse1DFFTImageFilterICD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInverse1DFFTImageFilterICD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInverse1DFFTImageFilterICD2 in _itkInverse1DFFTImageFilterPython:
_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD2_swigregister(itkInverse1DFFTImageFilterICD2)
itkInverse1DFFTImageFilterICD2___New_orig__ = _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD2___New_orig__
itkInverse1DFFTImageFilterICD2_cast = _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD2_cast


def itkInverse1DFFTImageFilterICD3_New():
    return itkInverse1DFFTImageFilterICD3.New()

class itkInverse1DFFTImageFilterICD3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD3ID3):
    r"""Proxy of C++ itkInverse1DFFTImageFilterICD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD3___New_orig__)
    GetDirection = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD3_GetDirection)
    SetDirection = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD3_SetDirection)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD3_GetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkInverse1DFFTImageFilterPython.delete_itkInverse1DFFTImageFilterICD3
    cast = _swig_new_static_method(_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD3_cast)

    def New(*args, **kargs):
        """New() -> itkInverse1DFFTImageFilterICD3

        Create a new object of the class itkInverse1DFFTImageFilterICD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInverse1DFFTImageFilterICD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInverse1DFFTImageFilterICD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInverse1DFFTImageFilterICD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInverse1DFFTImageFilterICD3 in _itkInverse1DFFTImageFilterPython:
_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD3_swigregister(itkInverse1DFFTImageFilterICD3)
itkInverse1DFFTImageFilterICD3___New_orig__ = _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD3___New_orig__
itkInverse1DFFTImageFilterICD3_cast = _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD3_cast


def itkInverse1DFFTImageFilterICD4_New():
    return itkInverse1DFFTImageFilterICD4.New()

class itkInverse1DFFTImageFilterICD4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD4ID4):
    r"""Proxy of C++ itkInverse1DFFTImageFilterICD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD4___New_orig__)
    GetDirection = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD4_GetDirection)
    SetDirection = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD4_SetDirection)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD4_GetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkInverse1DFFTImageFilterPython.delete_itkInverse1DFFTImageFilterICD4
    cast = _swig_new_static_method(_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD4_cast)

    def New(*args, **kargs):
        """New() -> itkInverse1DFFTImageFilterICD4

        Create a new object of the class itkInverse1DFFTImageFilterICD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInverse1DFFTImageFilterICD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInverse1DFFTImageFilterICD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInverse1DFFTImageFilterICD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInverse1DFFTImageFilterICD4 in _itkInverse1DFFTImageFilterPython:
_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD4_swigregister(itkInverse1DFFTImageFilterICD4)
itkInverse1DFFTImageFilterICD4___New_orig__ = _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD4___New_orig__
itkInverse1DFFTImageFilterICD4_cast = _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD4_cast


def itkInverse1DFFTImageFilterICF2_New():
    return itkInverse1DFFTImageFilterICF2.New()

class itkInverse1DFFTImageFilterICF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF2IF2):
    r"""Proxy of C++ itkInverse1DFFTImageFilterICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF2___New_orig__)
    GetDirection = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF2_GetDirection)
    SetDirection = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF2_SetDirection)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF2_GetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkInverse1DFFTImageFilterPython.delete_itkInverse1DFFTImageFilterICF2
    cast = _swig_new_static_method(_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF2_cast)

    def New(*args, **kargs):
        """New() -> itkInverse1DFFTImageFilterICF2

        Create a new object of the class itkInverse1DFFTImageFilterICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInverse1DFFTImageFilterICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInverse1DFFTImageFilterICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInverse1DFFTImageFilterICF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInverse1DFFTImageFilterICF2 in _itkInverse1DFFTImageFilterPython:
_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF2_swigregister(itkInverse1DFFTImageFilterICF2)
itkInverse1DFFTImageFilterICF2___New_orig__ = _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF2___New_orig__
itkInverse1DFFTImageFilterICF2_cast = _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF2_cast


def itkInverse1DFFTImageFilterICF3_New():
    return itkInverse1DFFTImageFilterICF3.New()

class itkInverse1DFFTImageFilterICF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF3IF3):
    r"""Proxy of C++ itkInverse1DFFTImageFilterICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF3___New_orig__)
    GetDirection = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF3_GetDirection)
    SetDirection = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF3_SetDirection)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF3_GetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkInverse1DFFTImageFilterPython.delete_itkInverse1DFFTImageFilterICF3
    cast = _swig_new_static_method(_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF3_cast)

    def New(*args, **kargs):
        """New() -> itkInverse1DFFTImageFilterICF3

        Create a new object of the class itkInverse1DFFTImageFilterICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInverse1DFFTImageFilterICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInverse1DFFTImageFilterICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInverse1DFFTImageFilterICF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInverse1DFFTImageFilterICF3 in _itkInverse1DFFTImageFilterPython:
_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF3_swigregister(itkInverse1DFFTImageFilterICF3)
itkInverse1DFFTImageFilterICF3___New_orig__ = _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF3___New_orig__
itkInverse1DFFTImageFilterICF3_cast = _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF3_cast


def itkInverse1DFFTImageFilterICF4_New():
    return itkInverse1DFFTImageFilterICF4.New()

class itkInverse1DFFTImageFilterICF4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF4IF4):
    r"""Proxy of C++ itkInverse1DFFTImageFilterICF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF4___New_orig__)
    GetDirection = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF4_GetDirection)
    SetDirection = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF4_SetDirection)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF4_GetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkInverse1DFFTImageFilterPython.delete_itkInverse1DFFTImageFilterICF4
    cast = _swig_new_static_method(_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF4_cast)

    def New(*args, **kargs):
        """New() -> itkInverse1DFFTImageFilterICF4

        Create a new object of the class itkInverse1DFFTImageFilterICF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInverse1DFFTImageFilterICF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInverse1DFFTImageFilterICF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInverse1DFFTImageFilterICF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInverse1DFFTImageFilterICF4 in _itkInverse1DFFTImageFilterPython:
_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF4_swigregister(itkInverse1DFFTImageFilterICF4)
itkInverse1DFFTImageFilterICF4___New_orig__ = _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF4___New_orig__
itkInverse1DFFTImageFilterICF4_cast = _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF4_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def inverse1_dfft_image_filter(*args: itkt.ImageLike,  direction: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for Inverse1DFFTImageFilter"""
    import itk

    kwarg_typehints = { 'direction':direction }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.Inverse1DFFTImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def inverse1_dfft_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.Ultrasound.Inverse1DFFTImageFilter
    inverse1_dfft_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    inverse1_dfft_image_filter.__doc__ = filter_object.__doc__




