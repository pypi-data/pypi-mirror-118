{"version":3,"file":"lib_index_js.ce9bcabfe81acf9d4108.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAA0D;AACW;AACpB;AACV;AACyB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,2DAAS,EAAE,oEAAe;AAClC;AACA;AACA;AACA;AACA,iEAAe,MAAM,EAAC;AACtB;AACA;AACA;AACA;AACA;AACA,wDAAwD,UAAU;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,oCAAoC,yEAAiB;AACrD,wCAAwC,gEAAc,GAAG,SAAS;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,mBAAmB,iDAAI;AACvB;AACA,KAAK;AACL;AACA;AACA;AACA,gBAAgB;AAChB,KAAK;AACL;AACA,sBAAsB,+DAAa;AACnC;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;;;;;;;;;;;;;;AC/E8C;AACU;AACxD;AACA;AACA;AACO,gCAAgC,wDAAM;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+EAA6B;AAChD;AACA","sources":["webpack://@swan-cern/hdfsbrowser/./lib/index.js","webpack://@swan-cern/hdfsbrowser/./lib/widgets/HdfsBrowserWidget.js"],"sourcesContent":["import { ILayoutRestorer } from '@jupyterlab/application';\nimport { MainAreaWidget, WidgetTracker } from '@jupyterlab/apputils';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { Menu } from '@lumino/widgets';\nimport { HdfsBrowserWidget } from './widgets/HdfsBrowserWidget';\n/**\n * Initialization data for the hdfsbrowser extension.\n */\nconst plugin = {\n    id: '@swan-cern/hdfsbrowser',\n    requires: [\n        IMainMenu, ILayoutRestorer\n    ],\n    activate: activate,\n    autoStart: true,\n};\nexport default plugin;\n/**\n * Activate the running plugin.\n */\nfunction activate(app, mainMenu, restorer) {\n    // Add a menu for the plugin\n    mainMenu.addMenu(createHadoopMenu(app, restorer), { rank: 60 });\n    console.log('JupyterLab hdfsbrowser is activated!');\n}\n/**\n * Create menu with commands and menu items\n */\nfunction createHadoopMenu(app, restorer) {\n    const category = 'Hadoop';\n    const namespace = 'hadoop';\n    const hdfsbrowserwidget = 'hadoop-extension-hdfsbrowser-jupyterlab';\n    const hdfsbrowseropen = 'hadoop:hdfsbrowseropen';\n    app.commands.addCommand(hdfsbrowseropen, {\n        label: 'HDFS Browser',\n        execute: () => {\n            // Restore widget if it was not closed (disposed)\n            let hdfsBrowserWidget = tracker.find(value => {\n                return value.id === hdfsbrowserwidget || false;\n            });\n            // If disposed, create new\n            if (!hdfsBrowserWidget) {\n                const content = new HdfsBrowserWidget();\n                hdfsBrowserWidget = new MainAreaWidget({ content });\n                hdfsBrowserWidget.id = hdfsbrowserwidget;\n                hdfsBrowserWidget.title.label = 'HDFS Browser';\n                hdfsBrowserWidget.title.closable = true;\n            }\n            // Track the state of the widget for later restoration\n            if (!tracker.has(hdfsBrowserWidget)) {\n                tracker.add(hdfsBrowserWidget);\n            }\n            if (!hdfsBrowserWidget.isAttached) {\n                // Attach the widget to the main work area if it's not there\n                app.shell.add(hdfsBrowserWidget, 'main');\n            }\n            hdfsBrowserWidget.content.update();\n            // Activate the widget\n            app.shell.activateById(hdfsBrowserWidget.id);\n        }\n    });\n    // Initialize hadoop menu\n    let menu = new Menu({\n        commands: app.commands\n    });\n    menu.title.label = category;\n    menu.addItem({\n        command: hdfsbrowseropen,\n        args: {},\n    });\n    // Track and restore the widget state e.g. after refresh\n    let tracker = new WidgetTracker({\n        namespace: namespace\n    });\n    restorer.restore(tracker, {\n        command: hdfsbrowseropen,\n        name: () => hdfsbrowserwidget\n    });\n    return menu;\n}\n","import { IFrame } from '@jupyterlab/apputils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * A class that exposes the git plugin Widget.\n */\nexport class HdfsBrowserWidget extends IFrame {\n    /**\n     * Construct a console panel.\n     */\n    constructor() {\n        super();\n        this.sandbox = [\n            'allow-same-origin',\n            'allow-scripts'\n        ];\n        this.url = ServerConnection.makeSettings().baseUrl + \"hdfsbrowser/explorer.html\";\n    }\n}\n"],"names":[],"sourceRoot":""}