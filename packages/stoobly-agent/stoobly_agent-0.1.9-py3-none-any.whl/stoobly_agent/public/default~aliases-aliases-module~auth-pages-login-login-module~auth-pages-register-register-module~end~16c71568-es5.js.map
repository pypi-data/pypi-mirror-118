{"version":3,"sources":["webpack:///node_modules/@angular/material/fesm2015/checkbox.js","webpack:///src/@vex/animations/fade-in-up.animation.ts"],"names":["MAT_CHECKBOX_DEFAULT_OPTIONS","providedIn","factory","MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY","color","clickAction","nextUniqueId","defaults","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","useExisting","MatCheckbox","multi","MatCheckboxChange","MatCheckboxBase","_elementRef","_MatCheckboxMixinBase","elementRef","_changeDetectorRef","_focusMonitor","_ngZone","tabIndex","_animationMode","_options","ariaLabel","ariaLabelledby","_uniqueId","id","labelPosition","name","change","indeterminateChange","_onTouched","_currentAnimationClass","_currentCheckState","_controlValueAccessorChangeFn","_checked","_disabled","_indeterminate","defaultColor","parseInt","monitor","subscribe","focusOrigin","Promise","resolve","then","markForCheck","_syncIndeterminate","stopMonitoring","disableRipple","disabled","detectChanges","value","checked","fn","isDisabled","indeterminate","newState","oldState","element","nativeElement","length","classList","remove","_getAnimationClassForCheckStateTransition","add","animationClass","runOutsideAngular","setTimeout","event","source","emit","_a","stopPropagation","toggle","_transitionCheckState","_emitChangeEvent","_inputElement","origin","options","focusVia","animSuffix","nativeCheckbox","_required","newValue","changed","decorators","type","args","selector","template","exportAs","host","providers","inputs","encapsulation","None","changeDetection","OnPush","styles","ctorParameters","String","undefined","propDecorators","ariaDescribedby","required","ripple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","_MatCheckboxRequiredValidatorModule","exports","declarations","MatCheckboxModule","imports","fadeInUpAnimation","duration","transform","opacity","fadeInUp400ms"],"mappings":"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","file":"default~aliases-aliases-module~auth-pages-login-login-module~auth-pages-register-register-module~end~16c71568-es5.js","sourcesContent":["import { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, NgZone, Attribute, Optional, Inject, Input, Output, ViewChild, Directive, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRipple, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ObserversModule } from '@angular/cdk/observers';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-checkbox`. */\nconst MAT_CHECKBOX_DEFAULT_OPTIONS = new InjectionToken('mat-checkbox-default-options', {\n    providedIn: 'root',\n    factory: MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        color: 'accent',\n        clickAction: 'check-indeterminate',\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n// Default checkbox configuration.\nconst defaults = MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY();\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nconst MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatCheckbox),\n    multi: true\n};\n/** Change event object emitted by MatCheckbox. */\nclass MatCheckboxChange {\n}\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nclass MatCheckboxBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatCheckboxMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase))));\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\nclass MatCheckbox extends _MatCheckboxMixinBase {\n    constructor(elementRef, _changeDetectorRef, _focusMonitor, _ngZone, tabIndex, _animationMode, _options) {\n        super(elementRef);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._focusMonitor = _focusMonitor;\n        this._ngZone = _ngZone;\n        this._animationMode = _animationMode;\n        this._options = _options;\n        /**\n         * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n         * take precedence so this may be omitted.\n         */\n        this.ariaLabel = '';\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._uniqueId = `mat-checkbox-${++nextUniqueId}`;\n        /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n        this.id = this._uniqueId;\n        /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n        this.labelPosition = 'after';\n        /** Name value will be applied to the input element if present */\n        this.name = null;\n        /** Event emitted when the checkbox's `checked` value changes. */\n        this.change = new EventEmitter();\n        /** Event emitted when the checkbox's `indeterminate` value changes. */\n        this.indeterminateChange = new EventEmitter();\n        /**\n         * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n         * @docs-private\n         */\n        this._onTouched = () => { };\n        this._currentAnimationClass = '';\n        this._currentCheckState = 0 /* Init */;\n        this._controlValueAccessorChangeFn = () => { };\n        this._checked = false;\n        this._disabled = false;\n        this._indeterminate = false;\n        this._options = this._options || defaults;\n        this.color = this.defaultColor = this._options.color || defaults.color;\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n    /** Returns the unique id for the visual hidden input. */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /** Whether the checkbox is required. */\n    get required() { return this._required; }\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n            if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state change\n                // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n                // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n                // telling the form control it has been touched until the next tick.\n                Promise.resolve().then(() => {\n                    this._onTouched();\n                    this._changeDetectorRef.markForCheck();\n                });\n            }\n        });\n        this._syncIndeterminate(this._indeterminate);\n    }\n    // TODO: Delete next major revision.\n    ngAfterViewChecked() { }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Whether the checkbox is checked.\n     */\n    get checked() { return this._checked; }\n    set checked(value) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this.disabled) {\n            this._disabled = newValue;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    get indeterminate() { return this._indeterminate; }\n    set indeterminate(value) {\n        const changed = value != this._indeterminate;\n        this._indeterminate = coerceBooleanProperty(value);\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(3 /* Indeterminate */);\n            }\n            else {\n                this._transitionCheckState(this.checked ? 1 /* Checked */ : 2 /* Unchecked */);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n        this._syncIndeterminate(this._indeterminate);\n    }\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n        // component will be only marked for check, but no actual change detection runs automatically.\n        // Instead of going back into the zone in order to trigger a change detection which causes\n        // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n        // an explicit change detection for the checkbox view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    _getAriaChecked() {\n        if (this.checked) {\n            return 'true';\n        }\n        return this.indeterminate ? 'mixed' : 'false';\n    }\n    _transitionCheckState(newState) {\n        let oldState = this._currentCheckState;\n        let element = this._elementRef.nativeElement;\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n        this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);\n        this._currentCheckState = newState;\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n            // Remove the animation class to avoid animation when the checkbox is moved between containers\n            const animationClass = this._currentAnimationClass;\n            this._ngZone.runOutsideAngular(() => {\n                setTimeout(() => {\n                    element.classList.remove(animationClass);\n                }, 1000);\n            });\n        }\n    }\n    _emitChangeEvent() {\n        const event = new MatCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n    /** Toggles the `checked` state of the checkbox. */\n    toggle() {\n        this.checked = !this.checked;\n    }\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event) {\n        var _a;\n        const clickAction = (_a = this._options) === null || _a === void 0 ? void 0 : _a.clickAction;\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && clickAction !== 'check') {\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n            this.toggle();\n            this._transitionCheckState(this._checked ? 1 /* Checked */ : 2 /* Unchecked */);\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        }\n        else if (!this.disabled && clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mat-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n    /** Focuses the checkbox. */\n    focus(origin = 'keyboard', options) {\n        this._focusMonitor.focusVia(this._inputElement, origin, options);\n    }\n    _onInteractionEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n    _getAnimationClassForCheckStateTransition(oldState, newState) {\n        // Don't transition if animations are disabled.\n        if (this._animationMode === 'NoopAnimations') {\n            return '';\n        }\n        let animSuffix = '';\n        switch (oldState) {\n            case 0 /* Init */:\n                // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n                // [checked] bound to it.\n                if (newState === 1 /* Checked */) {\n                    animSuffix = 'unchecked-checked';\n                }\n                else if (newState == 3 /* Indeterminate */) {\n                    animSuffix = 'unchecked-indeterminate';\n                }\n                else {\n                    return '';\n                }\n                break;\n            case 2 /* Unchecked */:\n                animSuffix = newState === 1 /* Checked */ ?\n                    'unchecked-checked' : 'unchecked-indeterminate';\n                break;\n            case 1 /* Checked */:\n                animSuffix = newState === 2 /* Unchecked */ ?\n                    'checked-unchecked' : 'checked-indeterminate';\n                break;\n            case 3 /* Indeterminate */:\n                animSuffix = newState === 1 /* Checked */ ?\n                    'indeterminate-checked' : 'indeterminate-unchecked';\n                break;\n        }\n        return `mat-checkbox-anim-${animSuffix}`;\n    }\n    /**\n     * Syncs the indeterminate value with the checkbox DOM node.\n     *\n     * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\n     * property is supported on an element boils down to `if (propName in element)`. Domino's\n     * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\n     * server-side rendering.\n     */\n    _syncIndeterminate(value) {\n        const nativeCheckbox = this._inputElement;\n        if (nativeCheckbox) {\n            nativeCheckbox.nativeElement.indeterminate = value;\n        }\n    }\n}\nMatCheckbox.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-checkbox',\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label>\\n  <span class=\\\"mat-checkbox-inner-container\\\"\\n       [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\">\\n    <input #input\\n           class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [checked]=\\\"checked\\\"\\n           [attr.value]=\\\"value\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [attr.aria-label]=\\\"ariaLabel || null\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-checked]=\\\"_getAriaChecked()\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           (change)=\\\"_onInteractionEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n    <span matRipple class=\\\"mat-checkbox-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n      <span class=\\\"mat-ripple-element mat-checkbox-persistent-ripple\\\"></span>\\n    </span>\\n    <span class=\\\"mat-checkbox-frame\\\"></span>\\n    <span class=\\\"mat-checkbox-background\\\">\\n      <svg version=\\\"1.1\\\"\\n           focusable=\\\"false\\\"\\n           class=\\\"mat-checkbox-checkmark\\\"\\n           viewBox=\\\"0 0 24 24\\\"\\n           xml:space=\\\"preserve\\\">\\n        <path class=\\\"mat-checkbox-checkmark-path\\\"\\n              fill=\\\"none\\\"\\n              stroke=\\\"white\\\"\\n              d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/>\\n      </svg>\\n      <!-- Element for rendering the indeterminate state checkbox. -->\\n      <span class=\\\"mat-checkbox-mixedmark\\\"></span>\\n    </span>\\n  </span>\\n  <span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                exportAs: 'matCheckbox',\n                host: {\n                    'class': 'mat-checkbox',\n                    '[id]': 'id',\n                    '[attr.tabindex]': 'null',\n                    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n                    '[class.mat-checkbox-checked]': 'checked',\n                    '[class.mat-checkbox-disabled]': 'disabled',\n                    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n                },\n                providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n                inputs: ['disableRipple', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0deg)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,100%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{display:inline-block;transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox-layout{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.cdk-high-contrast-active .mat-checkbox.cdk-keyboard-focused .mat-checkbox-frame{border-style:dotted}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0, 0, 0.2, 0.1),opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.cdk-high-contrast-active .mat-checkbox .mat-checkbox-background{background:none}.mat-checkbox-persistent-ripple{display:block;width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media(hover: none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.910259;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.cdk-high-contrast-black-on-white .mat-checkbox-checkmark-path{stroke:#000 !important}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0deg);border-radius:2px}.cdk-high-contrast-active .mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0deg)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.cdk-high-contrast-active .mat-checkbox-disabled{opacity:.5}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0ms mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0ms mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:300ms linear 0ms mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}\\n\"]\n            },] }\n];\nMatCheckbox.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: FocusMonitor },\n    { type: NgZone },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_CHECKBOX_DEFAULT_OPTIONS,] }] }\n];\nMatCheckbox.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    ariaDescribedby: [{ type: Input, args: ['aria-describedby',] }],\n    id: [{ type: Input }],\n    required: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    name: [{ type: Input }],\n    change: [{ type: Output }],\n    indeterminateChange: [{ type: Output }],\n    value: [{ type: Input }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }],\n    ripple: [{ type: ViewChild, args: [MatRipple,] }],\n    checked: [{ type: Input }],\n    disabled: [{ type: Input }],\n    indeterminate: [{ type: Input }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n    multi: true\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\nclass MatCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\nMatCheckboxRequiredValidator.decorators = [\n    { type: Directive, args: [{\n                selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n                providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** This module is used by both original and MDC-based checkbox implementations. */\nclass _MatCheckboxRequiredValidatorModule {\n}\n_MatCheckboxRequiredValidatorModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [MatCheckboxRequiredValidator],\n                declarations: [MatCheckboxRequiredValidator],\n            },] }\n];\nclass MatCheckboxModule {\n}\nMatCheckboxModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    MatRippleModule, MatCommonModule, ObserversModule,\n                    _MatCheckboxRequiredValidatorModule\n                ],\n                exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n                declarations: [MatCheckbox],\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR, MAT_CHECKBOX_DEFAULT_OPTIONS, MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY, MAT_CHECKBOX_REQUIRED_VALIDATOR, MatCheckbox, MatCheckboxChange, MatCheckboxModule, MatCheckboxRequiredValidator, _MatCheckboxRequiredValidatorModule };\n//# sourceMappingURL=checkbox.js.map\n","import { animate, style, transition, trigger } from '@angular/animations';\r\n\r\nexport function fadeInUpAnimation(duration: number) {\r\n  return trigger('fadeInUp', [\r\n    transition(':enter', [\r\n      style({\r\n        transform: 'translateY(20px)',\r\n        opacity: 0\r\n      }),\r\n      animate(`${duration}ms cubic-bezier(0.35, 0, 0.25, 1)`, style({\r\n        transform: 'translateY(0)',\r\n        opacity: 1\r\n      }))\r\n    ])\r\n  ]);\r\n}\r\n\r\nexport const fadeInUp400ms = fadeInUpAnimation(400);\r\n"]}