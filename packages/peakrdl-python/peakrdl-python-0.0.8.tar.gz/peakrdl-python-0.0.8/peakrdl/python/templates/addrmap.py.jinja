"""Python Wrapper for the {{top_node.inst_name}} register model

This code was generated from the PeakRDL-python package

"""
{% if uses_enum %}from enum import IntEnum, unique{% endif %}
from typing import Tuple, NoReturn
from typing import Iterable

from .peakrdl_python_types import AddressMap, Reg, RegFile, AddressSpaceProps
from .peakrdl_python_types import RegReadOnly, RegWriteOnly, RegReadWrite
from .peakrdl_python_types import Field, FieldReadOnly, FieldWriteOnly, FieldReadWrite, FieldSizeProps
from .peakrdl_python_types import ReadCallback, WriteCallback

{% from 'addrmap_field.py.jinja' import field_class with context %}
{% from 'addrmap_register.py.jinja' import register_class with context %}



{%- macro regfile_or_addr_instance(node) %}
    {%- if isinstance(node, systemrdlRegNode) %}
        {%- if node.is_array %}
            {%- if node.has_sw_readable and node.has_sw_writable %}
    self.__{{node.inst_name}} = ( {% for node_instance_index in range(get_array_dim(node))  %}
                                       {{get_fully_qualified_type_name(node)}}_cls(read_callback=read_callback,
                                                                   write_callback=write_callback,
                                                                   address_space_properties=AddressSpaceProps(base_address=self.base_address+{{node.raw_address_offset}}+({{node_instance_index}} * {{node.array_stride}}),
                                                                                     address_width=self.address_width,
                                                                                     data_width=self.data_width),
                                                                   logger_handle=logger_handle+'.{{node.inst_name}}[{{node_instance_index}}]',
                                                                                   inst_name='{{node.inst_name}}')
                                       {%- if not loop.last -%} ,  {%- endif -%}
                                       {% endfor %} )
            {%- elif node.has_sw_readable and not node.has_sw_writable %}
    self.__{{node.inst_name}} = ( {% for node_instance_index in range(get_array_dim(node))  %}
                                       {{get_fully_qualified_type_name(node)}}_cls(read_callback=read_callback,
                                                                   address_space_properties=AddressSpaceProps(base_address=self.base_address+{{node.raw_address_offset}}+({{node_instance_index}} * {{node.array_stride}}),
                                                                                     address_width=self.address_width,
                                                                                     data_width=self.data_width),
                                                                   logger_handle=logger_handle+'.{{node.inst_name}}[{{node_instance_index}}]',
                                                                                   inst_name='{{node.inst_name}}')
                                       {%- if not loop.last -%} ,  {%- endif -%}
                                       {% endfor %} )
            {%- elif not node.has_sw_readable and node.has_sw_writable %}
    self.__{{node.inst_name}} = ( {% for node_instance_index in range(get_array_dim(node))  %}
                                       {{get_fully_qualified_type_name(node)}}_cls(write_callback=write_callback,
                                                                   address_space_properties=AddressSpaceProps(base_address=self.base_address+{{node.raw_address_offset}}+({{node_instance_index}} * {{node.array_stride}}),
                                                                                     address_width=self.address_width,
                                                                                     data_width=self.data_width),
                                                                   logger_handle=logger_handle+'.{{node.inst_name}}[{{node_instance_index}}]',
                                                                                   inst_name='{{node.inst_name}}')
                                       {%- if not loop.last -%} ,  {%- endif -%}
                                       {% endfor %} )
            {%- endif %}
        {%- else %}
            {%- if node.has_sw_readable and node.has_sw_writable %}
    self.__{{node.inst_name}} = {{get_fully_qualified_type_name(node)}}_cls(read_callback=read_callback,
                                                                 write_callback=write_callback,
                                                                 address_space_properties=AddressSpaceProps(base_address=self.base_address+{{node.address_offset}},
                                                                 address_width=self.address_width,
                                                                 data_width=self.data_width),
                                                                 logger_handle=logger_handle+'.{{node.inst_name}}',
                                                                                   inst_name='{{node.inst_name}}')
            {%- elif node.has_sw_readable and not node.has_sw_writable %}
    self.__{{node.inst_name}} = {{get_fully_qualified_type_name(node)}}_cls(read_callback=read_callback,
                                                                 address_space_properties=AddressSpaceProps(base_address=self.base_address+{{node.address_offset}},
                                                                 address_width=self.address_width,
                                                                 data_width=self.data_width),
                                                                 logger_handle=logger_handle+'.{{node.inst_name}}',
                                                                                   inst_name='{{node.inst_name}}')
            {%- elif not node.has_sw_readable and node.has_sw_writable %}
    self.__{{node.inst_name}} = {{get_fully_qualified_type_name(node)}}_cls(write_callback=write_callback,
                                                                                 address_space_properties=AddressSpaceProps(base_address=self.base_address+{{node.address_offset}},
                                                                                 address_width=self.address_width,
                                                                                 data_width=self.data_width),
                                                                                 logger_handle=logger_handle+'.{{node.inst_name}}',
                                                                                   inst_name='{{node.inst_name}}')
            {%- endif %}
        {%- endif %}
    {%- elif isinstance(node, systemrdlRegfileNode) %}
        {%- if node.is_array %}
    self.__{{node.inst_name}} = ( {% for node_instance_index in range(get_array_dim(node))  %}
                                       {{get_fully_qualified_type_name(node)}}_cls(read_callback=read_callback,
                                                                                   write_callback=write_callback,
                                                                                   address_space_properties=AddressSpaceProps(base_address=self.base_address+{{node.raw_address_offset}}+({{node_instance_index}} * {{node.array_stride}}),
                                                                                   address_width=self.address_width,
                                                                                   data_width=self.data_width),
                                                                                   logger_handle=logger_handle+'.{{node.inst_name}}[{{node_instance_index}}]',
                                                                                   inst_name='{{node.inst_name}}')
                                       {%- if not loop.last -%} ,  {%- endif -%}
                                       {% endfor %} )
        {%- else -%}
    self.__{{node.inst_name}} = {{get_fully_qualified_type_name(node)}}_cls(read_callback=read_callback,
                                                                                 write_callback=write_callback,
                                                                                 address_space_properties=AddressSpaceProps(base_address=self.base_address+{{node.address_offset}},
                                                                                 address_width=self.address_width,
                                                                                 data_width=self.data_width),
                                                                                 logger_handle=logger_handle+'.{{node.inst_name}}',
                                                                                 inst_name='{{node.inst_name}}')
        {%- endif %}
    {%- elif isinstance(node, systemrdlAddrmapNode) %}
        {%- if node.is_array %}
    self.__{{node.inst_name}} = ( {% for node_instance_index in range(get_array_dim(node))  %}
                                       {{get_fully_qualified_type_name(node)}}_cls(read_callback=read_callback,
                                                                                   write_callback=write_callback,
                                                                                   base_address=self.base_address+{{node.raw_address_offset}}+({{node_instance_index}} * {{node.array_stride}}),
                                                                                   address_width=self.address_width,
                                                                                   data_width=self.data_width,
                                                                                   logger_handle=logger_handle+'.{{node.inst_name}}[{{node_instance_index}}]',
                                                                                   inst_name='{{node.inst_name}}')
                                       {%- if not loop.last -%} ,  {%- endif -%}
                                       {% endfor %} )
        {%- else -%}
    self.__{{node.inst_name}} = {{get_fully_qualified_type_name(node)}}_cls(read_callback=read_callback,
                                                                                 write_callback=write_callback,
                                                                                 base_address=self.base_address+{{node.address_offset}},
                                                                                 address_width=self.address_width,
                                                                                 data_width=self.data_width,
                                                                                 logger_handle=logger_handle+'.{{node.inst_name}}',
                                                                                 inst_name='{{node.inst_name}}')
        {%- endif %}
    {%- endif %}
{%- endmacro %}

{%- macro regfile_class(node) %}
class {{get_fully_qualified_type_name(node)}}_cls(RegFile):
    """
    Class to represent a register file in the register model

    {{get_table_block(node) | indent}}
    """

    __slots__ = [{%- for child_node in node.children(unroll=False) -%}'__{{child_node.inst_name}}'{% if not loop.last %}, {% endif %}{%- endfor %}]

    def __init__(self,
                 read_callback: ReadCallback,
                 write_callback: WriteCallback,
                 address_space_properties: AddressSpaceProps,
                 logger_handle:str,
                 inst_name:str):

        super().__init__(address_space_properties=address_space_properties,
                         logger_handle=logger_handle,
                         inst_name=inst_name)

        # instance of objects within the class
        {% for child_node in node.children(unroll=False) -%}
            {{ regfile_or_addr_instance(child_node) | indent }}
        {% endfor %}

    # properties for Register and RegisterFiles
    {%- for child_node in node.children(unroll=False) %}
        {%- if isinstance(child_node, systemrdlRegNode) or isinstance(child_node, systemrdlRegfileNode) %}
    @property
    def {{child_node.inst_name}}(self) -> {% if child_node.is_array -%}Tuple[{%- endif -%}{{get_fully_qualified_type_name(child_node)}}_cls{%- if child_node.is_array -%}, ...]{%- endif -%}:
        return self.__{{child_node.inst_name}}
        {%- endif %}
    {% endfor %}

{%- endmacro %}

{%- macro addrmap_class(node) %}
class {{get_fully_qualified_type_name(node)}}_cls(AddressMap):
    """
    Class to represent a address map in the register model

    {{get_table_block(node) | indent}}
    """

    __slots__ = [{%- for child_node in node.children(unroll=False) -%}{%- if isinstance(child_node, systemrdlRegNode) or isinstance(child_node, systemrdlRegfileNode) or isinstance(child_node, systemrdlAddrmapNode) -%}'__{{child_node.inst_name}}'{% if not loop.last %}, {% endif %}{% endif %}{%- endfor %}]

    def __init__(self,
                 read_callback: ReadCallback,
                 write_callback: WriteCallback,
                 base_address:int {%- if node == top_node -%}={{top_node.absolute_address}}{%- endif -%},
                 logger_handle:str {%- if node == top_node -%}='reg_model.{{top_node.get_path()}}'{%- endif -%},
                 inst_name{%- if node == top_node -%}='{{node.inst_name}}'{%- endif -%},
                 address_width=32,
                 data_width=32):

        super().__init__(address_space_properties=AddressSpaceProps(base_address=base_address,
                                                                    address_width=address_width,
                                                                    data_width=data_width),
                         logger_handle=logger_handle,
                         inst_name=inst_name)

        {% for child_node in node.children(unroll=False) -%}
            {{ regfile_or_addr_instance(child_node) | indent }}
        {% endfor %}

        {%- for child_node in node.children(unroll=False) -%}
            {%- if isinstance(child_node, systemrdlRegNode) or isinstance(child_node, systemrdlRegfileNode) or isinstance(child_node, systemrdlAddrmapNode) %}
    @property
    def {{child_node.inst_name}}(self) ->  {% if child_node.is_array -%}Tuple[{%- endif -%}{{get_fully_qualified_type_name(child_node)}}_cls{%- if child_node.is_array -%},...]{%- endif -%}:
        return self.__{{child_node.inst_name}}
            {%- endif %}
        {% endfor %}
{%- endmacro %}

{% if uses_enum %}
# root level enum definitions
{%- for enum_needed in get_dependent_enum(top_node.parent) %}
@unique
class {{get_fully_qualified_enum_type(enum_needed, top_node.parent)}}_enumcls(IntEnum):

    {% for value_of_enum_needed in enum_needed -%}
    {{ value_of_enum_needed.name }} = {{ value_of_enum_needed.value }}  {%- if value_of_enum_needed.rdl_desc is not none -%}# {{ value_of_enum_needed.rdl_desc }} {%- endif %}
    {% endfor %}
{% endfor -%}
{% endif %}


# regfile, register and field definitions
{%- for node in get_dependent_component(top_node.parent) -%}
    {% if isinstance(node, systemrdlRegNode) %}
        {{ register_class(node)  }}
    {% elif isinstance(node, systemrdlRegfileNode) %}
        {{ regfile_class(node) }}
    {% elif isinstance(node, systemrdlAddrmapNode) %}
        {{ addrmap_class(node) }}
    {% elif isinstance(node, systemrdlFieldNode) %}
        {{ field_class(node)  }}
    {% endif %}
{% endfor %}


if __name__ == '__main__':
    # dummy functions to demonstrate the class
    def read_addr_space(addr: int):
        assert isinstance(addr, int)
        return input('value to read from address:0x%X'%addr)

    def write_addr_space(addr: int, data: int):
        assert isinstance(addr, int)
        assert isinstance(data, int)
        print('write data:0x%X to address:0x%X'%(data, addr))

    # create an instance of the class
    {{top_node.inst_name}} = {{get_fully_qualified_type_name(top_node)}}_cls(read_callback=read_addr_space, write_callback=write_addr_space)
