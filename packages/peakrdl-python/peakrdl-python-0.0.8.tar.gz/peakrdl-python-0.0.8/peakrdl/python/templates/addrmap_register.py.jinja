{%- macro register_class(node) %}
    {%- if node.has_sw_readable and node.has_sw_writable %}
class {{get_fully_qualified_type_name(node)}}_cls(RegReadWrite):
    {%- elif node.has_sw_readable and not node.has_sw_writable %}
class {{get_fully_qualified_type_name(node)}}_cls(RegReadOnly):
    {%- elif not node.has_sw_readable and node.has_sw_writable %}
class {{get_fully_qualified_type_name(node)}}_cls(RegWriteOnly):
    {%- endif %}
    """
    Class to represent a register in the register model

    {{get_table_block(node) | indent}}
    """

    __slots__ = [{%- for child_node in node.children(unroll=False) -%}'__{{child_node.inst_name}}'{% if not loop.last %}, {% endif %}{%- endfor %}]

    {%- if node.has_sw_readable and node.has_sw_writable %}

    def __init__(self,
                 read_callback: ReadCallback,
                 write_callback: WriteCallback,
                 address_space_properties: AddressSpaceProps,
                 logger_handle: str,
                 inst_name: str):

        super().__init__(read_callback=read_callback,
                         write_callback=write_callback,
                         address_space_properties=address_space_properties,
                         logger_handle=logger_handle,
                         inst_name=inst_name)
    {%- elif node.has_sw_readable and not node.has_sw_writable %}

    def __init__(self,
                 read_callback: ReadCallback,
                 address_space_properties: AddressSpaceProps,
                 logger_handle: str,
                 inst_name: str):

        super().__init__(read_callback=read_callback,
                         address_space_properties=address_space_properties,
                         logger_handle=logger_handle,
                         inst_name=inst_name)
    {%- elif not node.has_sw_readable and node.has_sw_writable %}

    def __init__(self,
                 write_callback: WriteCallback,
                 address_space_properties: AddressSpaceProps,
                 logger_handle: str,
                 inst_name: str):

        super().__init__(write_callback=write_callback,
                         address_space_properties=address_space_properties,
                         logger_handle=logger_handle,
                         inst_name=inst_name)
    {%- endif %}

        # build the field attributes
        {%- for child_node in node.fields() %}
            {%- if isinstance(child_node, systemrdlFieldNode) %}
        self.__{{child_node.inst_name}} = {{get_fully_qualified_type_name(child_node)}}_cls(parent_register=self,
                                                                                 size_props=FieldSizeProps( width={{child_node.width}},
                                                                                                             lsb={{child_node.lsb}},
                                                                                                             msb={{child_node.msb}},
                                                                                                             low={{child_node.low}},
                                                                                                             high={{child_node.high}}),
                                                                                 logger_handle=logger_handle+'.{{child_node.inst_name}}',
                                                                                 inst_name='{{child_node.inst_name}}')
            {%- endif -%}
        {%- endfor %}

    {% if node.has_sw_readable %}
    def read_fields(self):
        """
        read the register and return a dictionary of the field values
        """
        reg_value = self.read()

        return_dict = {
                        {%- for child_node in get_reg_readable_fields(node) %}
                        '{{child_node.inst_name}}' : self.{{child_node.inst_name}}.decode_read_value(reg_value)
                        {%- if not loop.last -%} ,  {%- endif -%}
                        {% endfor %}
                      }

        return return_dict

    @property
    def readable_fields(self) -> Iterable[Field]:
        """
        generator that produces has all the readable fields within the register
        """
        {% for child_node in get_reg_readable_fields(node) -%}
        yield self.{{child_node.inst_name}}
        {% endfor %}

    {% endif %}

    {% if node.has_sw_writable %}
    @property
    def writable_fields(self) -> Iterable[Field]:
        """
        generator that produces has all the writable fields within the register
        """
        {% for child_node in get_reg_writable_fields(node) -%}
        yield self.{{child_node.inst_name}}
        {% endfor %}

    {% if node.has_sw_readable %}
    def write_fields(self, **kwargs) -> NoReturn:
        """
        Do a read-modify-write to the register, updating any field included in
        the arguments
        """

        if len(kwargs) == 0:
            raise ValueError('no command args')

        bit_mask = 0
        reg_value = 0
        {%- for child_node in get_reg_writable_fields(node) %}
        if '{{child_node.inst_name}}' in kwargs:
            reg_value |= self.{{child_node.inst_name}}.encode_write_value(kwargs['{{child_node.inst_name}}'])
            bit_mask |= self.{{child_node.inst_name}}.bitmask
            kwargs.pop('{{child_node.inst_name}}')
        {%- endfor %}
        if len(kwargs) != 0:
            # left over unhandled arguments
            raise ValueError('unrecognised arguments in field')

        inverse_bit_mask = self.max_value ^ bit_mask

        self.write((self.read() & inverse_bit_mask) | reg_value)

    {% else %}
    def write_fields(self, {%- for child_node in node.fields() -%} {{child_node.inst_name}} : int{%- if not loop.last -%},{%- endif -%}{%- endfor -%}) -> NoReturn:
        """
        Do a write to the register, updating all fields
        """
        reg_value = 0
        {%- for child_node in node.fields() %}
        reg_value |= self.{{child_node.inst_name}}.encode_write_value({{child_node.inst_name}})
        {% endfor %}

        self.write(reg_value)
    {% endif %}
    {% endif %}

    # build the properties for the fields
    {%- for child_node in node.children(unroll=False) -%}
        {%- if isinstance(child_node, systemrdlFieldNode) %}
    @property
    def {{child_node.inst_name}}(self) -> {{get_fully_qualified_type_name(child_node)}}_cls:
        return self.__{{child_node.inst_name}}
        {% endif %}
    {%- endfor %}

{%- endmacro %}
