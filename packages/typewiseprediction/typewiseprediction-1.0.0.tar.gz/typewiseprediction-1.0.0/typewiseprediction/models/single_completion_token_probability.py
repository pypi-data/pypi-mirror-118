# coding: utf-8

"""
    Typewise API

    Typewise server for text completion, autocorrection and emoji searching.  # noqa: E501

    OpenAPI spec version: 0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SingleCompletionTokenProbability(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'token': 'str',
        'score': 'float'
    }

    attribute_map = {
        'token': 'token',
        'score': 'score'
    }

    def __init__(self, token=None, score=None):  # noqa: E501
        """SingleCompletionTokenProbability - a model defined in Swagger"""  # noqa: E501
        self._token = None
        self._score = None
        self.discriminator = None
        self.token = token
        self.score = score

    @property
    def token(self):
        """Gets the token of this SingleCompletionTokenProbability.  # noqa: E501

        Token being considered (just a character for the character level model).  # noqa: E501

        :return: The token of this SingleCompletionTokenProbability.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this SingleCompletionTokenProbability.

        Token being considered (just a character for the character level model).  # noqa: E501

        :param token: The token of this SingleCompletionTokenProbability.  # noqa: E501
        :type: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501

        self._token = token

    @property
    def score(self):
        """Gets the score of this SingleCompletionTokenProbability.  # noqa: E501

        The probability output by the network for each token, (token = character in a char-level model).  # noqa: E501

        :return: The score of this SingleCompletionTokenProbability.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this SingleCompletionTokenProbability.

        The probability output by the network for each token, (token = character in a char-level model).  # noqa: E501

        :param score: The score of this SingleCompletionTokenProbability.  # noqa: E501
        :type: float
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")  # noqa: E501

        self._score = score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SingleCompletionTokenProbability, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SingleCompletionTokenProbability):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
