name: Release

on:
  push:
    branches: [ main, luci-tab ]
    tags: [ 'v*' ]

jobs:
  macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.6
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: aarch64-apple-darwin
          profile: minimal
          default: true
      - name: Build wheels - x86_64
        uses: messense/maturin-action@v1
        with:
          target: x86_64-apple-darwin
          args: --release --out dist --strip
      - name: Install built wheel - x86_64
        run: |
          pip install aliyundrive-webdav --no-index --find-links dist --force-reinstall
          aliyundrive-webdav --help
      - name: Build wheels - universal2
        uses: messense/maturin-action@v1
        with:
          args: --release --universal2 --out dist --strip --no-sdist
      - name: Install built wheel - universal2
        run: |
          pip install aliyundrive-webdav --no-index --find-links dist --force-reinstall
          aliyundrive-webdav --help
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist
      - name: Archive binary
        run: |
          cd target/release
          tar czvf aliyundrive-webdav.tar.gz aliyundrive-webdav
          cd -
      - name: Upload binary artifacts
        uses: actions/upload-artifact@v2
        with:
          name: apple-darwin-bin
          path: target/release/aliyundrive-webdav.tar.gz
      - name: Upload binary to GitHub Release
        uses: svenstaro/upload-release-action@v2
        if: "startsWith(github.ref, 'refs/tags/')"
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          asset_name: aliyundrive-webdav-apple-darwin.tar.gz
          file: target/release/aliyundrive-webdav.tar.gz
          tag: ${{ github.ref }}

  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [
          { target: "x86_64-unknown-linux-musl", image_tag: "x86_64-musl", wheel: true },
          { target: "i686-unknown-linux-musl", image_tag: "i686-musl", wheel: true },
          { target: "aarch64-unknown-linux-musl", image_tag: "aarch64-musl", wheel: true },
          { target: "armv7-unknown-linux-musleabihf", image_tag: "armv7-musleabihf", wheel: true },
          { target: "armv7-unknown-linux-musleabi", image_tag: "armv7-musleabi", wheel: false },
          { target: "arm-unknown-linux-musleabihf", image_tag: "arm-musleabihf", wheel: false },
          { target: "arm-unknown-linux-musleabi", image_tag: "arm-musleabi", wheel: false },
        ]
    container:
      image: docker://messense/rust-musl-cross:${{ matrix.platform.image_tag }}
      env:
        CFLAGS_armv7_unknown_linux_musleabihf: '-mfpu=vfpv3-d16'
    steps:
      - uses: actions/checkout@v2
      - name: Build Wheels
        uses: messense/maturin-action@main
        with:
          target: ${{ matrix.platform.target }}
          manylinux: auto
          container: off
          args: --no-sdist --release -o dist --strip
      - name: Upload wheels
        if: matrix.platform.wheel
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist
      - name: Upx compress binary
        uses: crazy-max/ghaction-upx@v1
        with:
          version: latest
          files: target/${{ matrix.platform.target }}/release/aliyundrive-webdav
      - name: Upload binary artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.platform.target }}-bin
          path: target/${{ matrix.platform.target }}/release/aliyundrive-webdav
      - name: Archive binary
        run: |
          cd target/${{ matrix.platform.target }}/release
          tar czvf aliyundrive-webdav.tar.gz aliyundrive-webdav
          cd -
      - name: Upload binary to GitHub Release
        uses: svenstaro/upload-release-action@v2
        if: "startsWith(github.ref, 'refs/tags/')"
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          asset_name: aliyundrive-webdav-${{ matrix.platform.target }}.tar.gz
          file: target/${{ matrix.platform.target }}/release/aliyundrive-webdav.tar.gz
          tag: ${{ github.ref }}

  openwrt:
    name: OpenWrt Package - ${{ matrix.target.cpu }}
    runs-on: ubuntu-latest
    needs: [ linux ]
    strategy:
      matrix:
        target:
          - cpu: "rockchip"
            sdk: "https://downloads.openwrt.org/snapshots/targets/rockchip/armv8/openwrt-sdk-rockchip-armv8_gcc-10.3.0_musl.Linux-x86_64.tar.xz"
          - cpu: "bcm53xx"
            sdk: "https://downloads.openwrt.org/snapshots/targets/bcm53xx/generic/openwrt-sdk-bcm53xx-generic_gcc-10.3.0_musl_eabi.Linux-x86_64.tar.xz"
          - cpu: "x86-64"
            sdk: "https://downloads.openwrt.org/snapshots/targets/x86/64/openwrt-sdk-x86-64_gcc-10.3.0_musl.Linux-x86_64.tar.xz"
    steps:
      - uses: actions/checkout@v2
      - name: Install build requirements
        run: |
          sudo apt-get install -y build-essential ccache ecj fastjar file g++ gawk \
          gettext git java-propose-classpath libelf-dev libncurses5-dev \
          libncursesw5-dev libssl-dev python python2.7-dev python3 unzip wget \
          python3-distutils python3-setuptools python3-dev rsync subversion \
          swig time xsltproc zlib1g-dev
      - name: Install OpenWrt SDK
        run: |
          wget -O openwrt-sdk.tar.xz ${{ matrix.target.sdk }}
          xz -q -d openwrt-sdk.tar.xz && tar -xvf openwrt-sdk.tar
          mv -f openwrt-sdk-* openwrt-sdk
      - name: Build Package
        run: |
          echo "src-link aliyundrive $GITHUB_WORKSPACE/openwrt" > openwrt-sdk/feeds.conf
          echo 'CONFIG_PACKAGE_aliyundrive-webdav=y
          CONFIG_PACKAGE_luci-app-aliyundrive-webdav=y
          ' >> openwrt-sdk/.config
          cd openwrt-sdk
          cat feeds.conf.default >> feeds.conf
          cat feeds.conf

          ./scripts/feeds update -a > /dev/null
          make defconfig

          cd feeds/luci/modules/luci-base/src
          make po2lmo
          sudo mv po2lmo /usr/bin/po2lmo
          cd -

          ./scripts/feeds install -d y -p "aliyundrive" -f -a
          make package/aliyundrive-webdav/compile V=s
          make package/luci-app-aliyundrive-webdav/compile V=s
          tree bin/packages/
      - name: Archive package
        uses: actions/upload-artifact@v1
        with:
          name: aliyundrive-webdav-openwrt-${{ matrix.target.cpu }}
          path: openwrt-sdk/bin/packages
      - name: Upload package to GitHub Release
        uses: svenstaro/upload-release-action@v2
        if: "startsWith(github.ref, 'refs/tags/')"
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file_glob: true
          overwrite: true
          file: openwrt-sdk/bin/packages/*/aliyundrive/*aliyundrive-webdav_*.ipk
          tag: ${{ github.ref }}

  merlin:
    name: Merlin Package
    runs-on: ubuntu-latest
    needs: [ linux ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: armv7-unknown-linux-musleabi-bin
      - name: Build package
        run: |
          mv aliyundrive-webdav merlin/aliyundrivewebdav/bin/
          cd merlin && python3 build.py && mv aliyundrivewebdav.tar.gz aliyundrivewebdav-merlin-arm380.tar.gz
      - name: Archive package
        uses: actions/upload-artifact@v1
        with:
          name: aliyundrive-webdav-merlin
          path: merlin/aliyundrivewebdav-merlin-arm380.tar.gz
      - name: Upload package to GitHub Release
        uses: svenstaro/upload-release-action@v2
        if: "startsWith(github.ref, 'refs/tags/')"
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: merlin/aliyundrivewebdav-merlin-arm380.tar.gz
          tag: ${{ github.ref }}

  release:
    name: Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [ linux, macos ]
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Publish to PyPi
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          pip install --upgrade twine
          twine upload --skip-existing *
