# coding: utf-8

"""
    Quickpac API

    Here you will find all public interfaces to the Quickpac system.  # noqa: E501

    OpenAPI spec version: v1.00

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from quickpac.api_client import ApiClient


class ZIPApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def z_ip_get_all_zip_codes_get(self, **kwargs):  # noqa: E501
        """Returns all currently deliverable and planned postcodes.  # noqa: E501

        ### Deliverable and planned postcodes   * This API returns all postcodes in a list which can be supplied by Quickpac now or in the future.   * Each postcode contains the first and last day of delivery by Quickpac   * In the event of an error, the 'Error' or 'Warning' property is set with one or more corresponding messages.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.z_ip_get_all_zip_codes_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ZIPAllResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.z_ip_get_all_zip_codes_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.z_ip_get_all_zip_codes_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def z_ip_get_all_zip_codes_get_with_http_info(self, **kwargs):  # noqa: E501
        """Returns all currently deliverable and planned postcodes.  # noqa: E501

        ### Deliverable and planned postcodes   * This API returns all postcodes in a list which can be supplied by Quickpac now or in the future.   * Each postcode contains the first and last day of delivery by Quickpac   * In the event of an error, the 'Error' or 'Warning' property is set with one or more corresponding messages.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.z_ip_get_all_zip_codes_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ZIPAllResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method z_ip_get_all_zip_codes_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/ZIP/GetAllZipCodes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ZIPAllResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def z_ip_is_deliverable_zip_code_get(self, **kwargs):  # noqa: E501
        """Checks whether the requested postcode can currently be delivered.  # noqa: E501

        ### Deliverable zip code   * This API checks whether the requested zip code can currently be supplied by Quickpac.   * In the event of an error, the 'Error' or 'Warning' property is set with one or more corresponding messages.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.z_ip_is_deliverable_zip_code_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int zip_code: ZIP code in the range from 1,000 - 9,999.
        :return: ZIPIsCurrentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.z_ip_is_deliverable_zip_code_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.z_ip_is_deliverable_zip_code_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def z_ip_is_deliverable_zip_code_get_with_http_info(self, **kwargs):  # noqa: E501
        """Checks whether the requested postcode can currently be delivered.  # noqa: E501

        ### Deliverable zip code   * This API checks whether the requested zip code can currently be supplied by Quickpac.   * In the event of an error, the 'Error' or 'Warning' property is set with one or more corresponding messages.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.z_ip_is_deliverable_zip_code_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int zip_code: ZIP code in the range from 1,000 - 9,999.
        :return: ZIPIsCurrentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['zip_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method z_ip_is_deliverable_zip_code_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'zip_code' in params:
            query_params.append(('zipCode', params['zip_code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/ZIP/IsDeliverableZipCode', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ZIPIsCurrentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
