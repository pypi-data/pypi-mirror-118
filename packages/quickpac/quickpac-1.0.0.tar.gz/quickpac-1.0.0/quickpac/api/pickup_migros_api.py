# coding: utf-8

"""
    Quickpac API

    Here you will find all public interfaces to the Quickpac system.  # noqa: E501

    OpenAPI spec version: v1.00

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from quickpac.api_client import ApiClient


class PickupMigrosApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def pickmup_set_paket_status_get(self, **kwargs):  # noqa: E501
        """SetPaketStatus  # noqa: E501

        ### SetPaketStatus  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pickmup_set_paket_status_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool use_production:
        :param bool validation_only:
        :param str password:
        :param str barcode_nr:
        :param int paketstatus_old:
        :param int paketstatus_neu:
        :return: PickupMigrosCallbackResultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pickmup_set_paket_status_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.pickmup_set_paket_status_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def pickmup_set_paket_status_get_with_http_info(self, **kwargs):  # noqa: E501
        """SetPaketStatus  # noqa: E501

        ### SetPaketStatus  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pickmup_set_paket_status_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool use_production:
        :param bool validation_only:
        :param str password:
        :param str barcode_nr:
        :param int paketstatus_old:
        :param int paketstatus_neu:
        :return: PickupMigrosCallbackResultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['use_production', 'validation_only', 'password', 'barcode_nr', 'paketstatus_old', 'paketstatus_neu']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pickmup_set_paket_status_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'use_production' in params:
            query_params.append(('useProduction', params['use_production']))  # noqa: E501
        if 'validation_only' in params:
            query_params.append(('validationOnly', params['validation_only']))  # noqa: E501
        if 'password' in params:
            query_params.append(('password', params['password']))  # noqa: E501
        if 'barcode_nr' in params:
            query_params.append(('barcodeNr', params['barcode_nr']))  # noqa: E501
        if 'paketstatus_old' in params:
            query_params.append(('paketstatusOld', params['paketstatus_old']))  # noqa: E501
        if 'paketstatus_neu' in params:
            query_params.append(('paketstatusNeu', params['paketstatus_neu']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/Pickmup/SetPaketStatus', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PickupMigrosCallbackResultResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pickmup_set_paket_status_post(self, **kwargs):  # noqa: E501
        """SetPaketStatus  # noqa: E501

        ### SetPaketStatus  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pickmup_set_paket_status_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PickupMigrosSetPaketStatusRequest body:
        :return: PickupMigrosCallbackResultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pickmup_set_paket_status_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.pickmup_set_paket_status_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def pickmup_set_paket_status_post_with_http_info(self, **kwargs):  # noqa: E501
        """SetPaketStatus  # noqa: E501

        ### SetPaketStatus  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pickmup_set_paket_status_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PickupMigrosSetPaketStatusRequest body:
        :return: PickupMigrosCallbackResultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pickmup_set_paket_status_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json', 'application/xml', 'text/xml', 'application/*+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/Pickmup/SetPaketStatus', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PickupMigrosCallbackResultResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pickmup_set_ruecksendung_get(self, **kwargs):  # noqa: E501
        """SetRuecksendung  # noqa: E501

        ### SetRuecksendung  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pickmup_set_ruecksendung_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool use_production:
        :param bool validation_only:
        :param str password:
        :param str barcode_nr:
        :param str abholort_id:
        :return: PickupMigrosCallbackResultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pickmup_set_ruecksendung_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.pickmup_set_ruecksendung_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def pickmup_set_ruecksendung_get_with_http_info(self, **kwargs):  # noqa: E501
        """SetRuecksendung  # noqa: E501

        ### SetRuecksendung  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pickmup_set_ruecksendung_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool use_production:
        :param bool validation_only:
        :param str password:
        :param str barcode_nr:
        :param str abholort_id:
        :return: PickupMigrosCallbackResultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['use_production', 'validation_only', 'password', 'barcode_nr', 'abholort_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pickmup_set_ruecksendung_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'use_production' in params:
            query_params.append(('useProduction', params['use_production']))  # noqa: E501
        if 'validation_only' in params:
            query_params.append(('validationOnly', params['validation_only']))  # noqa: E501
        if 'password' in params:
            query_params.append(('password', params['password']))  # noqa: E501
        if 'barcode_nr' in params:
            query_params.append(('barcodeNr', params['barcode_nr']))  # noqa: E501
        if 'abholort_id' in params:
            query_params.append(('abholortID', params['abholort_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/Pickmup/SetRuecksendung', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PickupMigrosCallbackResultResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pickmup_set_ruecksendung_post(self, **kwargs):  # noqa: E501
        """SetRuecksendung  # noqa: E501

        ### SetRuecksendung  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pickmup_set_ruecksendung_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PickupMigrosSetRuecksendung body:
        :return: PickupMigrosCallbackResultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pickmup_set_ruecksendung_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.pickmup_set_ruecksendung_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def pickmup_set_ruecksendung_post_with_http_info(self, **kwargs):  # noqa: E501
        """SetRuecksendung  # noqa: E501

        ### SetRuecksendung  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pickmup_set_ruecksendung_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PickupMigrosSetRuecksendung body:
        :return: PickupMigrosCallbackResultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pickmup_set_ruecksendung_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json', 'application/xml', 'text/xml', 'application/*+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/Pickmup/SetRuecksendung', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PickupMigrosCallbackResultResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
