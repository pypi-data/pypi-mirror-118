# coding: utf-8

"""
    Quickpac API

    Here you will find all public interfaces to the Quickpac system.  # noqa: E501

    OpenAPI spec version: v1.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ZIPIsCurrentResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'zip_code': 'int',
        'deliverable': 'bool',
        'errors': 'list[MessageType]',
        'warnings': 'list[MessageType]'
    }

    attribute_map = {
        'zip_code': 'ZipCode',
        'deliverable': 'Deliverable',
        'errors': 'Errors',
        'warnings': 'Warnings'
    }

    def __init__(self, zip_code=None, deliverable=None, errors=None, warnings=None):  # noqa: E501
        """ZIPIsCurrentResponse - a model defined in Swagger"""  # noqa: E501
        self._zip_code = None
        self._deliverable = None
        self._errors = None
        self._warnings = None
        self.discriminator = None
        if zip_code is not None:
            self.zip_code = zip_code
        if deliverable is not None:
            self.deliverable = deliverable
        if errors is not None:
            self.errors = errors
        if warnings is not None:
            self.warnings = warnings

    @property
    def zip_code(self):
        """Gets the zip_code of this ZIPIsCurrentResponse.  # noqa: E501

        Gets or sets the ZipCode.  # noqa: E501

        :return: The zip_code of this ZIPIsCurrentResponse.  # noqa: E501
        :rtype: int
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this ZIPIsCurrentResponse.

        Gets or sets the ZipCode.  # noqa: E501

        :param zip_code: The zip_code of this ZIPIsCurrentResponse.  # noqa: E501
        :type: int
        """

        self._zip_code = zip_code

    @property
    def deliverable(self):
        """Gets the deliverable of this ZIPIsCurrentResponse.  # noqa: E501

        Gets or sets a value indicating whether this ZipCode is deliverable.  # noqa: E501

        :return: The deliverable of this ZIPIsCurrentResponse.  # noqa: E501
        :rtype: bool
        """
        return self._deliverable

    @deliverable.setter
    def deliverable(self, deliverable):
        """Sets the deliverable of this ZIPIsCurrentResponse.

        Gets or sets a value indicating whether this ZipCode is deliverable.  # noqa: E501

        :param deliverable: The deliverable of this ZIPIsCurrentResponse.  # noqa: E501
        :type: bool
        """

        self._deliverable = deliverable

    @property
    def errors(self):
        """Gets the errors of this ZIPIsCurrentResponse.  # noqa: E501


        :return: The errors of this ZIPIsCurrentResponse.  # noqa: E501
        :rtype: list[MessageType]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ZIPIsCurrentResponse.


        :param errors: The errors of this ZIPIsCurrentResponse.  # noqa: E501
        :type: list[MessageType]
        """

        self._errors = errors

    @property
    def warnings(self):
        """Gets the warnings of this ZIPIsCurrentResponse.  # noqa: E501


        :return: The warnings of this ZIPIsCurrentResponse.  # noqa: E501
        :rtype: list[MessageType]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this ZIPIsCurrentResponse.


        :param warnings: The warnings of this ZIPIsCurrentResponse.  # noqa: E501
        :type: list[MessageType]
        """

        self._warnings = warnings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ZIPIsCurrentResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ZIPIsCurrentResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
