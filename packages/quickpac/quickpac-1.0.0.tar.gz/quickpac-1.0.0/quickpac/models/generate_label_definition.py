# coding: utf-8

"""
    Quickpac API

    Here you will find all public interfaces to the Quickpac system.  # noqa: E501

    OpenAPI spec version: v1.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GenerateLabelDefinition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'print_addresses': 'PrintAddressesType',
        'image_file_type': 'str',
        'image_resolution': 'int',
        'print_preview': 'bool',
        'label_layout': 'str'
    }

    attribute_map = {
        'print_addresses': 'PrintAddresses',
        'image_file_type': 'ImageFileType',
        'image_resolution': 'ImageResolution',
        'print_preview': 'PrintPreview',
        'label_layout': 'LabelLayout'
    }

    def __init__(self, print_addresses=None, image_file_type=None, image_resolution=None, print_preview=None, label_layout=None):  # noqa: E501
        """GenerateLabelDefinition - a model defined in Swagger"""  # noqa: E501
        self._print_addresses = None
        self._image_file_type = None
        self._image_resolution = None
        self._print_preview = None
        self._label_layout = None
        self.discriminator = None
        if print_addresses is not None:
            self.print_addresses = print_addresses
        if image_file_type is not None:
            self.image_file_type = image_file_type
        if image_resolution is not None:
            self.image_resolution = image_resolution
        if print_preview is not None:
            self.print_preview = print_preview
        if label_layout is not None:
            self.label_layout = label_layout

    @property
    def print_addresses(self):
        """Gets the print_addresses of this GenerateLabelDefinition.  # noqa: E501


        :return: The print_addresses of this GenerateLabelDefinition.  # noqa: E501
        :rtype: PrintAddressesType
        """
        return self._print_addresses

    @print_addresses.setter
    def print_addresses(self, print_addresses):
        """Sets the print_addresses of this GenerateLabelDefinition.


        :param print_addresses: The print_addresses of this GenerateLabelDefinition.  # noqa: E501
        :type: PrintAddressesType
        """

        self._print_addresses = print_addresses

    @property
    def image_file_type(self):
        """Gets the image_file_type of this GenerateLabelDefinition.  # noqa: E501


        :return: The image_file_type of this GenerateLabelDefinition.  # noqa: E501
        :rtype: str
        """
        return self._image_file_type

    @image_file_type.setter
    def image_file_type(self, image_file_type):
        """Sets the image_file_type of this GenerateLabelDefinition.


        :param image_file_type: The image_file_type of this GenerateLabelDefinition.  # noqa: E501
        :type: str
        """

        self._image_file_type = image_file_type

    @property
    def image_resolution(self):
        """Gets the image_resolution of this GenerateLabelDefinition.  # noqa: E501


        :return: The image_resolution of this GenerateLabelDefinition.  # noqa: E501
        :rtype: int
        """
        return self._image_resolution

    @image_resolution.setter
    def image_resolution(self, image_resolution):
        """Sets the image_resolution of this GenerateLabelDefinition.


        :param image_resolution: The image_resolution of this GenerateLabelDefinition.  # noqa: E501
        :type: int
        """

        self._image_resolution = image_resolution

    @property
    def print_preview(self):
        """Gets the print_preview of this GenerateLabelDefinition.  # noqa: E501


        :return: The print_preview of this GenerateLabelDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._print_preview

    @print_preview.setter
    def print_preview(self, print_preview):
        """Sets the print_preview of this GenerateLabelDefinition.


        :param print_preview: The print_preview of this GenerateLabelDefinition.  # noqa: E501
        :type: bool
        """

        self._print_preview = print_preview

    @property
    def label_layout(self):
        """Gets the label_layout of this GenerateLabelDefinition.  # noqa: E501


        :return: The label_layout of this GenerateLabelDefinition.  # noqa: E501
        :rtype: str
        """
        return self._label_layout

    @label_layout.setter
    def label_layout(self, label_layout):
        """Sets the label_layout of this GenerateLabelDefinition.


        :param label_layout: The label_layout of this GenerateLabelDefinition.  # noqa: E501
        :type: str
        """

        self._label_layout = label_layout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GenerateLabelDefinition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerateLabelDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
