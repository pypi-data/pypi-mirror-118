# coding: utf-8

"""
    Quickpac API

    Here you will find all public interfaces to the Quickpac system.  # noqa: E501

    OpenAPI spec version: v1.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ZIPModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'zip_code': 'int',
        'depot': 'int',
        'city': 'str',
        'language': 'LanguageCode',
        'kanton': 'str',
        'delivery_first': 'datetime',
        'delivery_last': 'datetime'
    }

    attribute_map = {
        'zip_code': 'ZipCode',
        'depot': 'Depot',
        'city': 'City',
        'language': 'Language',
        'kanton': 'Kanton',
        'delivery_first': 'DeliveryFirst',
        'delivery_last': 'DeliveryLast'
    }

    def __init__(self, zip_code=None, depot=None, city=None, language=None, kanton=None, delivery_first=None, delivery_last=None):  # noqa: E501
        """ZIPModel - a model defined in Swagger"""  # noqa: E501
        self._zip_code = None
        self._depot = None
        self._city = None
        self._language = None
        self._kanton = None
        self._delivery_first = None
        self._delivery_last = None
        self.discriminator = None
        if zip_code is not None:
            self.zip_code = zip_code
        if depot is not None:
            self.depot = depot
        if city is not None:
            self.city = city
        if language is not None:
            self.language = language
        if kanton is not None:
            self.kanton = kanton
        if delivery_first is not None:
            self.delivery_first = delivery_first
        if delivery_last is not None:
            self.delivery_last = delivery_last

    @property
    def zip_code(self):
        """Gets the zip_code of this ZIPModel.  # noqa: E501


        :return: The zip_code of this ZIPModel.  # noqa: E501
        :rtype: int
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this ZIPModel.


        :param zip_code: The zip_code of this ZIPModel.  # noqa: E501
        :type: int
        """

        self._zip_code = zip_code

    @property
    def depot(self):
        """Gets the depot of this ZIPModel.  # noqa: E501


        :return: The depot of this ZIPModel.  # noqa: E501
        :rtype: int
        """
        return self._depot

    @depot.setter
    def depot(self, depot):
        """Sets the depot of this ZIPModel.


        :param depot: The depot of this ZIPModel.  # noqa: E501
        :type: int
        """

        self._depot = depot

    @property
    def city(self):
        """Gets the city of this ZIPModel.  # noqa: E501


        :return: The city of this ZIPModel.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ZIPModel.


        :param city: The city of this ZIPModel.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def language(self):
        """Gets the language of this ZIPModel.  # noqa: E501


        :return: The language of this ZIPModel.  # noqa: E501
        :rtype: LanguageCode
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this ZIPModel.


        :param language: The language of this ZIPModel.  # noqa: E501
        :type: LanguageCode
        """

        self._language = language

    @property
    def kanton(self):
        """Gets the kanton of this ZIPModel.  # noqa: E501


        :return: The kanton of this ZIPModel.  # noqa: E501
        :rtype: str
        """
        return self._kanton

    @kanton.setter
    def kanton(self, kanton):
        """Sets the kanton of this ZIPModel.


        :param kanton: The kanton of this ZIPModel.  # noqa: E501
        :type: str
        """

        self._kanton = kanton

    @property
    def delivery_first(self):
        """Gets the delivery_first of this ZIPModel.  # noqa: E501


        :return: The delivery_first of this ZIPModel.  # noqa: E501
        :rtype: datetime
        """
        return self._delivery_first

    @delivery_first.setter
    def delivery_first(self, delivery_first):
        """Sets the delivery_first of this ZIPModel.


        :param delivery_first: The delivery_first of this ZIPModel.  # noqa: E501
        :type: datetime
        """

        self._delivery_first = delivery_first

    @property
    def delivery_last(self):
        """Gets the delivery_last of this ZIPModel.  # noqa: E501


        :return: The delivery_last of this ZIPModel.  # noqa: E501
        :rtype: datetime
        """
        return self._delivery_last

    @delivery_last.setter
    def delivery_last(self, delivery_last):
        """Sets the delivery_last of this ZIPModel.


        :param delivery_last: The delivery_last of this ZIPModel.  # noqa: E501
        :type: datetime
        """

        self._delivery_last = delivery_last

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ZIPModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ZIPModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
