# coding: utf-8

"""
    Quickpac API

    Here you will find all public interfaces to the Quickpac system.  # noqa: E501

    OpenAPI spec version: v1.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Item(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'item_id': 'str',
        'ident_code': 'str',
        'recipient': 'Recipient',
        'attributes': 'ServiceCodeAttributes',
        'notification': 'list[Notification]'
    }

    attribute_map = {
        'item_id': 'ItemID',
        'ident_code': 'IdentCode',
        'recipient': 'Recipient',
        'attributes': 'Attributes',
        'notification': 'Notification'
    }

    def __init__(self, item_id=None, ident_code=None, recipient=None, attributes=None, notification=None):  # noqa: E501
        """Item - a model defined in Swagger"""  # noqa: E501
        self._item_id = None
        self._ident_code = None
        self._recipient = None
        self._attributes = None
        self._notification = None
        self.discriminator = None
        if item_id is not None:
            self.item_id = item_id
        if ident_code is not None:
            self.ident_code = ident_code
        if recipient is not None:
            self.recipient = recipient
        if attributes is not None:
            self.attributes = attributes
        if notification is not None:
            self.notification = notification

    @property
    def item_id(self):
        """Gets the item_id of this Item.  # noqa: E501


        :return: The item_id of this Item.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this Item.


        :param item_id: The item_id of this Item.  # noqa: E501
        :type: str
        """

        self._item_id = item_id

    @property
    def ident_code(self):
        """Gets the ident_code of this Item.  # noqa: E501


        :return: The ident_code of this Item.  # noqa: E501
        :rtype: str
        """
        return self._ident_code

    @ident_code.setter
    def ident_code(self, ident_code):
        """Sets the ident_code of this Item.


        :param ident_code: The ident_code of this Item.  # noqa: E501
        :type: str
        """

        self._ident_code = ident_code

    @property
    def recipient(self):
        """Gets the recipient of this Item.  # noqa: E501


        :return: The recipient of this Item.  # noqa: E501
        :rtype: Recipient
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient):
        """Sets the recipient of this Item.


        :param recipient: The recipient of this Item.  # noqa: E501
        :type: Recipient
        """

        self._recipient = recipient

    @property
    def attributes(self):
        """Gets the attributes of this Item.  # noqa: E501


        :return: The attributes of this Item.  # noqa: E501
        :rtype: ServiceCodeAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Item.


        :param attributes: The attributes of this Item.  # noqa: E501
        :type: ServiceCodeAttributes
        """

        self._attributes = attributes

    @property
    def notification(self):
        """Gets the notification of this Item.  # noqa: E501


        :return: The notification of this Item.  # noqa: E501
        :rtype: list[Notification]
        """
        return self._notification

    @notification.setter
    def notification(self, notification):
        """Sets the notification of this Item.


        :param notification: The notification of this Item.  # noqa: E501
        :type: list[Notification]
        """

        self._notification = notification

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Item, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Item):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
